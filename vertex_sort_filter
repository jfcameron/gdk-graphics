emerging *modeler abstractions are pretty good but im running into extensibility issues:

- What if many modelers could contribute to the same vertex data? Should all modelers take batch_modeler as an arg? should it be a case by case?
	-> I think case by case is fine. If the author thinks a modeler can contribute to a shared batch_modeler, then they can provide a ptr batch_modeler ctor argument

- What if I want to apply a vertex transformation after the modeler's transformations are done but before the model is updated?
	-> again, this could be case by case, but I can think of generic transformations (e.g: sorting for transparency), so I think a generic mechanism needs to exist
	-> this makes me think of filter programs. unix piping. its extremely simple and effective. how would that translate into this project?

batch_modeler
	get_model?
	get_vertex_data?

a mutable view to batch_modeler's vertex data. not a vector because I dont want the user to have access to clear, push_back, ... Just being able to iterate and
modify data in place. I have this but is it good enough?


batch_modeler
	handle add_vertex_data
	void remove_vertex_data(handle)
	void replace_vertex_data(handle)
	void clear_vertex_data


batch_modeler -> vertex_batch

vertex_batch
	std::queue<size_t> recycled_handles
	size_t handleCounter = 0
	std::unordered_map<vertex_data> instances
	size_t add_instance(vertex_data)
		instances[handleCounter](data)
		auto handle = recycled_handles.size()
			? recylced_handles.pop_front()
			:handleCounter++;
		return handle;
	update_model()
		m_Buffer.clear
		for instance : instances
			m_Buffer += instance
		m_pModel->update(buffer)
	overwrite_instance(size_t handle, data)
		m_instances[handle] = data;
	remove_instance(size_t handle)
		m_instances.erase(handle);
		recycled_handles.push_back(handle)
	clear()
		m_Buffer.clear
		m_Instances.clear
		m_recycled_handles.clear
		m_handleCounter = 0
	on_upload_transform(std::function<void(byte *pData, size_t size)> transformer)
