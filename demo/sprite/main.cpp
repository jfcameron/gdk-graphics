// Â© Joseph Cameron - All Rights Reserved

#include <gdk/ext/sprite_animation.h>
#include <gdk/game_loop.h>
#include <gdk/glfw_window.h>
#include <gdk/graphics_context.h>
#include <gdk/graphics_types.h>
#include <gdk/model_data.h>
#include <gdk/texture_data.h>
#include <gdk/webgl1es2_context.h>
#include <jfc/event.h>

#include <array>
#include <chrono>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <map>
#include <set>
#include <thread>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>

using namespace gdk;

static const std::vector<texture_data::encoded_byte> PNG { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xaa, 0x69, 0x71, 0xde, 0x00, 0x00, 0x00,
    0x01, 0x73, 0x52, 0x47, 0x42, 0x01, 0xd9, 0xc9, 0x2c, 0x7f, 0x00, 0x00,
    0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc,
    0x61, 0x05, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4d, 0x00, 0x00,
    0x7a, 0x26, 0x00, 0x00, 0x80, 0x84, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00,
    0x80, 0xe8, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0xea, 0x60, 0x00, 0x00,
    0x3a, 0x98, 0x00, 0x00, 0x17, 0x70, 0x9c, 0xba, 0x51, 0x3c, 0x00, 0x00,
    0x00, 0x06, 0x62, 0x4b, 0x47, 0x44, 0x00, 0xe0, 0x00, 0xa6, 0x00, 0x8a,
    0x01, 0x0f, 0x37, 0x4c, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73,
    0x00, 0x00, 0x0e, 0xa6, 0x00, 0x00, 0x0e, 0xa6, 0x01, 0x87, 0xdc, 0xa9,
    0x6f, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 0x45, 0x07, 0xe9, 0x05,
    0x09, 0x02, 0x32, 0x30, 0x80, 0x5a, 0x90, 0xa3, 0x00, 0x00, 0x04, 0x50,
    0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0xed, 0x5a, 0xbf, 0x6b, 0x1b, 0x31,
    0x14, 0x7e, 0x36, 0x47, 0x86, 0xd0, 0xc3, 0x43, 0xa1, 0xa5, 0x4b, 0x69,
    0x12, 0x12, 0x48, 0xe0, 0x06, 0x53, 0x70, 0x86, 0x0e, 0xf9, 0x07, 0xba,
    0x05, 0x3c, 0xd4, 0x19, 0xe2, 0xa1, 0x60, 0x0f, 0xd9, 0x82, 0xa7, 0x9a,
    0x36, 0xb8, 0x93, 0xf1, 0xe6, 0xc1, 0x86, 0x2e, 0x85, 0xd8, 0x1e, 0x0c,
    0xf9, 0x07, 0xba, 0xb5, 0x9b, 0x0d, 0xc5, 0xc3, 0x41, 0x3b, 0x74, 0xa8,
    0xf1, 0x96, 0x6e, 0xc1, 0xc5, 0x43, 0x97, 0xeb, 0x52, 0x5d, 0x74, 0xb2,
    0xa4, 0xd3, 0x8f, 0x77, 0xb6, 0x0b, 0xf7, 0xe0, 0x88, 0x7c, 0xb9, 0xa7,
    0xef, 0xbd, 0x27, 0xe9, 0x49, 0xef, 0x43, 0x19, 0x40, 0x16, 0x37, 0xe7,
    0x06, 0xaa, 0xdf, 0xce, 0xef, 0xe6, 0x99, 0x55, 0xe3, 0xb3, 0x98, 0x0e,
    0xa6, 0x03, 0x44, 0x77, 0xfb, 0xe2, 0x0c, 0x00, 0x00, 0x1e, 0x3c, 0x7f,
    0x2d, 0xd4, 0xfd, 0x75, 0x7e, 0x82, 0x1e, 0x40, 0x25, 0xfc, 0xf3, 0x93,
    0x80, 0xd6, 0x77, 0xb0, 0x1d, 0x20, 0xba, 0xaa, 0xa3, 0x45, 0x3b, 0x81,
    0x8d, 0xff, 0xfb, 0xeb, 0x87, 0xa5, 0x7e, 0x1e, 0x7d, 0xfc, 0x1c, 0x09,
    0x86, 0x63, 0xe3, 0x40, 0x9c, 0xf0, 0x0c, 0xa0, 0x0d, 0xe1, 0x39, 0x81,
    0x89, 0xcf, 0xda, 0xc1, 0x13, 0xc7, 0x44, 0x91, 0x38, 0xc4, 0x8e, 0xa0,
    0x4e, 0x3f, 0x8b, 0x76, 0xcf, 0xd8, 0x70, 0x1d, 0xfc, 0x38, 0x1c, 0x47,
    0x25, 0x82, 0x3a, 0x23, 0xa8, 0x03, 0xae, 0x9a, 0x04, 0x6d, 0xf0, 0x6f,
    0x2e, 0x4b, 0x70, 0xda, 0xea, 0xc3, 0xcd, 0x65, 0x09, 0x00, 0x00, 0x4e,
    0x5b, 0x7d, 0xf0, 0x3b, 0x75, 0xf0, 0xaa, 0x8d, 0xe5, 0x1c, 0x20, 0x72,
    0x60, 0x01, 0x3d, 0xe5, 0xe9, 0xb6, 0x68, 0xf7, 0x42, 0x00, 0x1a, 0x94,
    0x67, 0x80, 0x4a, 0x5f, 0xb6, 0xf8, 0x07, 0x7b, 0xbb, 0x00, 0x00, 0xe1,
    0x5f, 0x56, 0xb2, 0xbc, 0x0e, 0x46, 0x47, 0x3b, 0x61, 0xf4, 0x88, 0xe1,
    0x6c, 0x5b, 0x34, 0x82, 0x5e, 0x21, 0x1f, 0x3a, 0x77, 0xb0, 0xb7, 0x1b,
    0x31, 0x40, 0x64, 0x84, 0x2e, 0xbe, 0xdf, 0xa9, 0x2b, 0xe3, 0xd3, 0xdf,
    0xb3, 0x6d, 0xee, 0x12, 0xe0, 0x75, 0x20, 0x6b, 0xf3, 0xc4, 0x2b, 0xe4,
    0x23, 0xbf, 0x65, 0x06, 0x98, 0xe0, 0xc7, 0x09, 0x8b, 0x2f, 0x93, 0xa5,
    0x7d, 0x94, 0x56, 0x1e, 0x94, 0x5f, 0x8a, 0x41, 0xfe, 0xad, 0x21, 0xde,
    0xd6, 0x16, 0x67, 0x80, 0x3f, 0x9e, 0x28, 0xe9, 0xae, 0x02, 0x1f, 0xdd,
    0x81, 0xed, 0x8b, 0x33, 0x58, 0xb4, 0x7b, 0x4b, 0xdb, 0x19, 0x79, 0x37,
    0x3a, 0xda, 0x11, 0x1a, 0x6f, 0x8b, 0xaf, 0x73, 0x90, 0xe2, 0x06, 0x40,
    0xc5, 0x81, 0x45, 0xbb, 0x27, 0x74, 0x9e, 0x24, 0x1f, 0xd1, 0x5e, 0x4e,
    0xef, 0x0a, 0xa6, 0x01, 0x14, 0xe1, 0x9b, 0xea, 0x67, 0x54, 0x94, 0x75,
    0x82, 0x00, 0x00, 0xd0, 0x2c, 0x3e, 0x0d, 0xdf, 0x55, 0xde, 0xfe, 0x01,
    0x00, 0x80, 0xee, 0xd5, 0x16, 0xd4, 0x86, 0x33, 0x28, 0x96, 0x2a, 0x30,
    0xec, 0x77, 0xb9, 0xc7, 0x58, 0x95, 0x00, 0xd2, 0x5b, 0x98, 0xaa, 0xf3,
    0x32, 0xfb, 0x23, 0x49, 0x70, 0x74, 0xb4, 0x03, 0x1e, 0x00, 0xbc, 0xbb,
    0xfd, 0xc2, 0x77, 0x80, 0xfa, 0x46, 0x36, 0x75, 0xaf, 0xa7, 0xf7, 0xef,
    0xaf, 0xcb, 0x74, 0x72, 0x7a, 0x28, 0x9d, 0x92, 0x5e, 0xb5, 0x11, 0x40,
    0x0c, 0xbe, 0x6c, 0xf9, 0x98, 0xd8, 0xcf, 0x2d, 0x26, 0x44, 0x6b, 0xd0,
    0x1f, 0x4f, 0xa4, 0xd3, 0xb7, 0x58, 0xaa, 0xc0, 0xf7, 0x1f, 0xa3, 0xc8,
    0xb7, 0xdc, 0x5d, 0x21, 0x66, 0x0d, 0xcb, 0xf0, 0x65, 0x87, 0x27, 0x13,
    0xfb, 0x1d, 0x76, 0x14, 0xe8, 0x24, 0x42, 0x14, 0xe8, 0x0e, 0xe3, 0x4e,
    0x6f, 0xb4, 0xe3, 0xa4, 0x3f, 0xfa, 0x9d, 0x8e, 0xf0, 0xf0, 0xe3, 0x12,
    0x9b, 0xae, 0xfd, 0x59, 0x51, 0x67, 0x87, 0xfb, 0xc7, 0x50, 0x2c, 0x55,
    0x96, 0x7e, 0xcb, 0xb2, 0xec, 0xb0, 0xdf, 0x0d, 0x41, 0x08, 0x10, 0x69,
    0xb3, 0x4f, 0x9c, 0x33, 0x26, 0xf8, 0x26, 0xfa, 0x6b, 0x27, 0x24, 0xd6,
    0x4d, 0xa8, 0x38, 0x49, 0x38, 0xaf, 0x43, 0x48, 0x60, 0xf3, 0x11, 0x6b,
    0x0d, 0x80, 0x09, 0x21, 0xc1, 0x06, 0xc1, 0x86, 0x50, 0xd9, 0x88, 0x00,
    0xe8, 0x12, 0x12, 0xd8, 0x84, 0xca, 0xc6, 0x05, 0x40, 0x85, 0xf8, 0xc0,
    0x24, 0x54, 0x74, 0x73, 0x88, 0xb3, 0x0a, 0xe7, 0x49, 0x19, 0x4b, 0xe4,
    0xb4, 0xd5, 0x57, 0x4a, 0x62, 0xba, 0x84, 0x8a, 0x49, 0x0e, 0xc9, 0x26,
    0xe1, 0x34, 0x5b, 0xcf, 0x9f, 0xb6, 0xfa, 0x21, 0x1f, 0x40, 0x08, 0x11,
    0x55, 0x7d, 0xf2, 0xad, 0xdf, 0xa9, 0x47, 0xda, 0x2a, 0x39, 0x68, 0x2d,
    0x4b, 0x40, 0x54, 0xcf, 0xaf, 0x4a, 0x5f, 0x97, 0x53, 0x4c, 0x64, 0x09,
    0xd8, 0x10, 0x22, 0x18, 0xfa, 0x3a, 0x9c, 0x22, 0xea, 0x41, 0x68, 0x3a,
    0x68, 0x06, 0x5e, 0xb5, 0x01, 0x2a, 0xf5, 0xbc, 0xdf, 0xa9, 0xc3, 0xb3,
    0x57, 0x35, 0x63, 0x3e, 0x82, 0xa7, 0x4f, 0x2a, 0x42, 0x9d, 0x04, 0x8c,
    0x1a, 0x80, 0x75, 0xd4, 0xf3, 0xbc, 0x24, 0xc8, 0x92, 0xa2, 0x5e, 0xb5,
    0x11, 0xce, 0x1c, 0xd2, 0x26, 0x55, 0x25, 0x6a, 0x12, 0x9c, 0xdf, 0xcd,
    0x33, 0xa2, 0x7a, 0x5c, 0xc5, 0x78, 0xbf, 0x53, 0x07, 0x53, 0x7d, 0xd3,
    0x1c, 0x92, 0x48, 0x2d, 0xc0, 0x12, 0x22, 0xdd, 0xab, 0x2d, 0x00, 0x00,
    0xa8, 0x0d, 0x67, 0x4a, 0xe5, 0x2c, 0xab, 0xff, 0xa2, 0xfc, 0x44, 0xa9,
    0x1c, 0x66, 0x97, 0x90, 0x0a, 0xa7, 0x98, 0x49, 0x22, 0x09, 0x8a, 0xd6,
    0xb1, 0x8c, 0x4f, 0x10, 0xe9, 0xf9, 0xe3, 0x09, 0x78, 0x85, 0x3c, 0x1c,
    0xee, 0x1f, 0x87, 0x15, 0xa7, 0x2a, 0x1f, 0xc8, 0xeb, 0x4b, 0xca, 0x09,
    0x62, 0x07, 0x80, 0x36, 0x9a, 0x94, 0xa6, 0x71, 0x0e, 0x10, 0x52, 0x45,
    0xc6, 0x21, 0xc4, 0xe5, 0x10, 0x42, 0xbc, 0x2e, 0x0d, 0x40, 0xa7, 0x0e,
    0xc7, 0xdf, 0x7e, 0xc2, 0xed, 0xfb, 0x4e, 0x26, 0xb1, 0x25, 0x60, 0x53,
    0x12, 0x93, 0x00, 0xd0, 0xbc, 0x82, 0x29, 0xb6, 0x57, 0xc8, 0x2f, 0x11,
    0x22, 0xbc, 0x19, 0x98, 0x48, 0x00, 0x6c, 0x03, 0x67, 0x53, 0xe1, 0xf1,
    0x66, 0x9f, 0x6c, 0x09, 0x65, 0xd6, 0x4d, 0x48, 0x6c, 0x14, 0x21, 0xf2,
    0x5f, 0xdc, 0xf0, 0x48, 0x9a, 0x10, 0xd9, 0xa4, 0x1b, 0x1e, 0xab, 0x20,
    0x44, 0xb2, 0x71, 0xc5, 0x84, 0xa8, 0xa0, 0x88, 0x30, 0x3b, 0x16, 0xd5,
    0x18, 0x36, 0x7e, 0x22, 0x84, 0xc8, 0x3a, 0x6f, 0x78, 0xd8, 0xe0, 0x5b,
    0x07, 0x60, 0x13, 0x6e, 0x78, 0xac, 0x34, 0x09, 0xbb, 0x39, 0x37, 0x70,
    0x73, 0x6e, 0x30, 0x1d, 0x34, 0x03, 0x37, 0xe7, 0x06, 0x9f, 0x1a, 0x95,
    0xb0, 0x3d, 0x1d, 0x34, 0x23, 0x6d, 0x5e, 0xb2, 0x73, 0x73, 0x6e, 0xf0,
    0xf8, 0x4d, 0x35, 0x7c, 0x48, 0x7f, 0xb2, 0x07, 0x13, 0x1f, 0x25, 0x07,
    0xd8, 0x12, 0x12, 0x3a, 0x8c, 0x8e, 0xea, 0x0d, 0x8f, 0x24, 0xc5, 0xc1,
    0x26, 0x24, 0x30, 0x1c, 0xc0, 0x26, 0x44, 0xb4, 0xaa, 0xc1, 0x75, 0xde,
    0xf0, 0xc0, 0x20, 0x54, 0x50, 0x02, 0x60, 0x73, 0x0a, 0x4b, 0xfa, 0x86,
    0x89, 0x0a, 0x27, 0x60, 0x1c, 0x00, 0x0c, 0x03, 0xd8, 0xc3, 0x90, 0x28,
    0xa3, 0xc7, 0x55, 0x74, 0xa2, 0xfc, 0x82, 0x9d, 0xf9, 0x51, 0x6f, 0x88,
    0x60, 0x38, 0x60, 0x43, 0xa8, 0x58, 0x27, 0x41, 0x9b, 0x1b, 0x22, 0xb4,
    0xc8, 0xf4, 0x55, 0x96, 0x56, 0x6d, 0x38, 0xbb, 0xbf, 0x6d, 0x52, 0xa6,
    0xff, 0x3b, 0x43, 0x39, 0xfe, 0x4a, 0x97, 0x00, 0x2f, 0x0b, 0xab, 0x32,
    0x3a, 0x71, 0x39, 0x40, 0x85, 0xd2, 0xb2, 0x21, 0x54, 0xac, 0x67, 0x00,
    0xc6, 0x0d, 0x11, 0x5e, 0xc0, 0x68, 0x7d, 0xd5, 0x11, 0xf4, 0xc7, 0x93,
    0x08, 0x2b, 0x44, 0x48, 0x12, 0x6c, 0x41, 0xbd, 0x21, 0xa2, 0xa2, 0xaf,
    0xba, 0xc3, 0xc8, 0x1e, 0x48, 0x25, 0x95, 0x54, 0x52, 0x49, 0x25, 0x95,
    0x54, 0x52, 0x49, 0x25, 0x95, 0x54, 0x52, 0x49, 0xc5, 0x4e, 0xfe, 0x02,
    0x69, 0x91, 0xab, 0x8d, 0x60, 0x33, 0x68, 0x89, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
};

static inline gdk::model_data make_quad() { 
    return {{
        { 
            "a_Position",
            {
                {
                    1.0f, 1.0f, 0.0f,
                    0.0f, 1.0f, 0.0f,
                    0.0f, 0.0f, 0.0f,
                    1.0f, 1.0f, 0.0f,
                    0.0f, 0.0f, 0.0f,
                    1.0f, 0.0f, 0.0f,
                },
                3
            }
        },
        { 
            "a_UV",
            {
                {
                    1, 0,
                    0, 0,
                    0, 1,
                    1, 0,
                    0, 1,
                    1, 1,
                },
                2
            }
        }
    }};
}

int main(int argc, char **argv) {
    const auto pWindow = glfw_window::make("game");

    jfc::event<float, float> update_event;

    const auto pGraphics = webgl1es2_context::make();
    const auto pScene = pGraphics->make_scene();

    const auto pCamera = [&]() {
        auto pCamera = pGraphics->make_camera();
        pCamera->set_clear_color(color::cornflower_blue);
        pScene->add(pCamera);
        update_event.subscribe([pCamera, &pWindow](float time, float deltaTime) {
            pCamera->set_projection(graphics_matrix4x4_type::make_orthographic_projection_matrix(
                {1.f, 1.f}, -0.1f, 10.f, pWindow->aspect_ratio()));
        });
        return pCamera;
    }();

    const auto pTexture = [&]() {
        auto [view, data] = texture_data::make_from_png(PNG);
        auto p = pGraphics->make_texture(view,
            texture::wrap_mode::clamped,
            texture::wrap_mode::clamped);
        return p;
    }();

    const auto pShader = pGraphics->get_alpha_cutoff_shader();

    const auto pMaterial = [&]() {
        auto p(pGraphics->make_material(pShader, material::render_mode::opaque));
        p->set_texture("_Texture", pTexture);
        p->set_vector2("_UVScale", {1, 1});
        p->set_vector2("_UVOffset", {0, 0});
        return p;
    }();

    const auto pModel = pGraphics->make_model();

    const auto pEntity = [&]() {
        auto p = pGraphics->make_entity(pModel, pMaterial);
        p->set_transform({0., 0., 0.}, {});
        pScene->add(p);
        return p;
    }();

    pCamera->set_transform({0}, {});
    pEntity->set_transform({0,0,0}, {{0,0,0}}, {1,1,1});

    gdk::sprite_animation walk({
        {0.0f, { 0, 0, 16, 17}},
        {0.5f, {16, 0, 16, 17}},
    });

    game_loop(60, [&](const float time, const float deltaTime) {
        glfw_window::poll_events();
        update_event.notify(time, deltaTime);

        auto frame = walk.at(time, 64, 64);

        auto vertexData = make_quad();
        vertexData.transform("a_Position", {-0.5, -0.5, 0});
        vertexData.transform("a_UV", {frame.u, frame.v}, 0, {frame.w, frame.h});
        pModel->upload(model::usage_hint::streaming, vertexData);
       
        pScene->draw(pWindow->window_size());
        pWindow->swap_buffers(); 
        return pWindow->should_close();
    });

    return EXIT_SUCCESS;
}

