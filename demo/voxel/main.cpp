// Â© Joseph Cameron - All Rights Reserved

#include "volume_block_model.h"

#include <gdk/ext/volumetric_lighting.h>
#include <gdk/game_loop.h>
#include <gdk/graphics_constraints.h>
#include <gdk/graphics_context.h>
#include <gdk/graphics_exception.h>
#include <gdk/scene.h>
#include <gdk/texture_data.h>
#include <gdk/webgl1es2_context.h>
#include <gdk/webgl1es2_shader_program.h>
#include <gdk/webgl1es2_texture.h>
#include <jfc/cube_array.h>
#include <jfc/glfw_window.h>
#include <jfc/to_array.h>

#include <GLFW/glfw3.h>

#include <algorithm>
#include <array>
#include <chrono>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <map>
#include <set>
#include <thread>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace jfc;
using namespace gdk;
using namespace gdk::ext::volume;

static const auto PNG = jfc::to_array<texture_data::encoded_byte>({
	0x89U, 0x50U, 0x4eU, 0x47U, 0x0dU, 0x0aU, 0x1aU, 0x0aU, 0x00U, 0x00U, 0x00U, 0x0dU,
	0x49U, 0x48U, 0x44U, 0x52U, 0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x20U,
	0x08U, 0x06U, 0x00U, 0x00U, 0x00U, 0x73U, 0x7aU, 0x7aU, 0xf4U, 0x00U, 0x00U, 0x00U,
	0x01U, 0x73U, 0x52U, 0x47U, 0x42U, 0x01U, 0xd9U, 0xc9U, 0x2cU, 0x7fU, 0x00U, 0x00U,
	0x00U, 0x04U, 0x67U, 0x41U, 0x4dU, 0x41U, 0x00U, 0x00U, 0xb1U, 0x8fU, 0x0bU, 0xfcU,
	0x61U, 0x05U, 0x00U, 0x00U, 0x00U, 0x20U, 0x63U, 0x48U, 0x52U, 0x4dU, 0x00U, 0x00U,
	0x7aU, 0x26U, 0x00U, 0x00U, 0x80U, 0x84U, 0x00U, 0x00U, 0xfaU, 0x00U, 0x00U, 0x00U,
	0x80U, 0xe8U, 0x00U, 0x00U, 0x75U, 0x30U, 0x00U, 0x00U, 0xeaU, 0x60U, 0x00U, 0x00U,
	0x3aU, 0x98U, 0x00U, 0x00U, 0x17U, 0x70U, 0x9cU, 0xbaU, 0x51U, 0x3cU, 0x00U, 0x00U,
	0x00U, 0x06U, 0x62U, 0x4bU, 0x47U, 0x44U, 0x00U, 0x23U, 0x00U, 0xafU, 0x00U, 0xceU,
	0xd1U, 0xdaU, 0x1bU, 0x41U, 0x00U, 0x00U, 0x00U, 0x09U, 0x70U, 0x48U, 0x59U, 0x73U,
	0x00U, 0x00U, 0x0eU, 0xa6U, 0x00U, 0x00U, 0x0eU, 0xa6U, 0x01U, 0x87U, 0xdcU, 0xa9U,
	0x6fU, 0x00U, 0x00U, 0x00U, 0x07U, 0x74U, 0x49U, 0x4dU, 0x45U, 0x07U, 0xe9U, 0x05U,
	0x12U, 0x01U, 0x0fU, 0x0bU, 0xdeU, 0xe7U, 0x5fU, 0xfeU, 0x00U, 0x00U, 0x09U, 0x35U,
	0x49U, 0x44U, 0x41U, 0x54U, 0x58U, 0xc3U, 0x45U, 0x96U, 0xc9U, 0x8eU, 0xecU, 0x48U,
	0x72U, 0x45U, 0x8fU, 0x39U, 0x9dU, 0x74U, 0xceU, 0x11U, 0x91U, 0x53U, 0xbdU, 0xaaU,
	0x6cU, 0x48U, 0xbdU, 0xd0U, 0x52U, 0x80U, 0xb6U, 0x02U, 0xfaU, 0x17U, 0xfaU, 0x1bU,
	0xf4U, 0x37U, 0xfaU, 0xc9U, 0xeeU, 0x2eU, 0x09U, 0xe8U, 0x7aU, 0x43U, 0xbdU, 0xccU,
	0xc8U, 0x88U, 0x48U, 0xceU, 0x83U, 0xd3U, 0xadU, 0x17U, 0x4cU, 0xbcU, 0x5aU, 0x10U,
	0x04U, 0x08U, 0x82U, 0x74U, 0xb3U, 0x7bU, 0xeeU, 0x35U, 0x93U, 0xffU, 0xfaU, 0x9fU,
	0xffU, 0xd6U, 0xb8U, 0x34U, 0xf8U, 0x6eU, 0xc3U, 0x66U, 0x82U, 0x18U, 0x61U, 0x6eU,
	0x02U, 0x51U, 0x22U, 0x84U, 0x4dU, 0x61U, 0x83U, 0xc8U, 0x09U, 0x49U, 0x01U, 0x73U,
	0x0fU, 0x04U, 0x70U, 0x15U, 0x4cU, 0x8dU, 0xa2U, 0x1bU, 0xfcU, 0xf5U, 0xfcU, 0x3bU,
	0x75U, 0x16U, 0xa3U, 0xaaU, 0x34U, 0xe3U, 0x8aU, 0x18U, 0xa1U, 0x72U, 0x96U, 0xc9U,
	0x6fU, 0x00U, 0x38U, 0x1bU, 0xf1U, 0xd2U, 0x2cU, 0xfcU, 0x54U, 0x27U, 0xbcU, 0xb4U,
	0x0bU, 0x8fU, 0x55U, 0x82U, 0x00U, 0x2fU, 0xedU, 0xc2U, 0x43U, 0x95U, 0x60U, 0x09U,
	0xcaU, 0x36U, 0x05U, 0x8cU, 0x95U, 0xfdU, 0x47U, 0x09U, 0xa8U, 0x1aU, 0x50U, 0x25U,
	0x12U, 0x21U, 0x6cU, 0x42U, 0x58U, 0x03U, 0x73U, 0x07U, 0xc5U, 0x9dU, 0xe0U, 0x57U,
	0x01U, 0x01U, 0x89U, 0x20U, 0xceU, 0x95U, 0xaaU, 0xb3U, 0x9cU, 0xaaU, 0x84U, 0x4bU,
	0x3bU, 0x63U, 0x8cU, 0xf0U, 0x6fU, 0x0fU, 0x05U, 0xd7U, 0x6eU, 0xa6U, 0x19U, 0x36U,
	0x5cU, 0x2cU, 0x2cU, 0x3eU, 0xf0U, 0x53U, 0x9dU, 0x70U, 0x57U, 0x3bU, 0x54U, 0xa1U,
	0x9bU, 0x3dU, 0xa5U, 0xb3U, 0x3cU, 0x94U, 0x09U, 0xafU, 0xcdU, 0x8cU, 0x89U, 0x52U,
	0x21U, 0xb2U, 0xe0U, 0x17U, 0x65U, 0x78U, 0xddU, 0x58U, 0x27U, 0x45U, 0x0cU, 0xccU,
	0xa3U, 0x92U, 0x96U, 0x20U, 0x46U, 0x31U, 0x56U, 0xc8U, 0x6aU, 0x01U, 0x40U, 0x01U,
	0x13U, 0x02U, 0x21U, 0x28U, 0x4bU, 0x0bU, 0xdfU, 0x9bU, 0x99U, 0x4bU, 0x33U, 0xd3U,
	0x4eU, 0x9eU, 0x2cU, 0x8eU, 0xf8U, 0xe7U, 0xb9U, 0x27U, 0x28U, 0x3cU, 0x56U, 0x09U,
	0x46U, 0xa0U, 0x4aU, 0x63U, 0x00U, 0xaeU, 0xedU, 0xc2U, 0xb9U, 0x5bU, 0x28U, 0x92U,
	0x88U, 0x6eU, 0xf2U, 0x44U, 0x06U, 0x9eU, 0x2aU, 0x87U, 0xf1U, 0x93U, 0x12U, 0x02U,
	0xc4U, 0x99U, 0x90U, 0x54U, 0xc2U, 0x34U, 0x28U, 0x12U, 0x02U, 0xaeU, 0x30U, 0x4cU,
	0x1dU, 0xdcU, 0xffU, 0xacU, 0x44U, 0x89U, 0xb0U, 0x05U, 0xe8U, 0x6fU, 0x8aU, 0x6eU,
	0x8aU, 0x75U, 0x82U, 0x75U, 0x42U, 0x94U, 0x09U, 0x4fU, 0xb5U, 0x03U, 0xa0U, 0x74U,
	0x96U, 0xb7U, 0x6eU, 0x61U, 0x0bU, 0xcaU, 0x6bU, 0x3bU, 0x23U, 0x22U, 0x94U, 0x69U,
	0x8cU, 0x11U, 0xa1U, 0x9dU, 0x56U, 0x82U, 0x06U, 0x1eU, 0xcaU, 0x84U, 0x7eU, 0xf6U,
	0x94U, 0xa9U, 0xe5U, 0x54U, 0x39U, 0xfaU, 0xc5U, 0x63U, 0xc4U, 0x80U, 0x1fU, 0x03U,
	0xe5U, 0x3dU, 0x20U, 0x82U, 0x06U, 0xb0U, 0xb9U, 0xe0U, 0xa7U, 0x40U, 0xd8U, 0xa0U,
	0x6fU, 0x84U, 0x38U, 0x55U, 0x96U, 0x5eU, 0xf1U, 0xa3U, 0xb2U, 0x4eU, 0x30U, 0xf4U,
	0xc2U, 0x36U, 0x2bU, 0xdbU, 0x18U, 0x68U, 0xa7U, 0x95U, 0x97U, 0x66U, 0x06U, 0xe0U,
	0xa9U, 0x76U, 0x1cU, 0xf3U, 0x98U, 0xc7U, 0xd2U, 0x11U, 0x54U, 0xe9U, 0x67U, 0xcfU,
	0xb1U, 0x4aU, 0x40U, 0x84U, 0x76U, 0xdaU, 0x50U, 0x94U, 0xa0U, 0xf0U, 0xdaU, 0x2eU,
	0xbcU, 0x35U, 0x13U, 0x5bU, 0x50U, 0x8cU, 0x06U, 0xc5U, 0x55U, 0x42U, 0x7bU, 0x86U,
	0x6dU, 0x51U, 0x6cU, 0x02U, 0xd5U, 0x51U, 0x89U, 0x12U, 0x08U, 0x6bU, 0x60U, 0x6cU,
	0x94U, 0x10U, 0xf6U, 0xe7U, 0xc5U, 0x49U, 0x88U, 0x9dU, 0xb2U, 0xf6U, 0x01U, 0x57U,
	0x82U, 0x71U, 0x86U, 0xcaU, 0xc5U, 0x3cU, 0x54U, 0x09U, 0xddU, 0xe4U, 0x01U, 0x38U,
	0x96U, 0x09U, 0xddU, 0xecU, 0xf7U, 0x76U, 0x3bU, 0xcbU, 0xadU, 0x9dU, 0x29U, 0x9dU,
	0x65U, 0x58U, 0x36U, 0xceU, 0xedU, 0x42U, 0x9dU, 0xeeU, 0xfaU, 0xb7U, 0x93U, 0x67U,
	0x5aU, 0x03U, 0xc6U, 0x66U, 0x06U, 0xa2U, 0x9dU, 0xf8U, 0x38U, 0x05U, 0x0dU, 0x70U,
	0x7bU, 0x81U, 0xb0U, 0x40U, 0x76U, 0x14U, 0xb6U, 0x15U, 0xe6U, 0x9bU, 0x52U, 0xdeU,
	0xc1U, 0xb2U, 0x08U, 0x4bU, 0xafU, 0x64U, 0x27U, 0xc1U, 0x26U, 0xe0U, 0xe7U, 0xc0U,
	0x6bU, 0xb7U, 0xd0U, 0x2fU, 0x1bU, 0x85U, 0xb3U, 0xb4U, 0x93U, 0xe7U, 0xdaU, 0x2eU,
	0x00U, 0x3cU, 0x94U, 0x31U, 0x02U, 0x34U, 0x93U, 0x47U, 0x55U, 0x11U, 0x81U, 0x87U,
	0xcaU, 0x21U, 0x46U, 0x18U, 0x16U, 0x4fU, 0x95U, 0xc6U, 0x3cU, 0xd5U, 0x0eU, 0x13U,
	0xbcU, 0x92U, 0xc4U, 0x60U, 0x22U, 0xf0U, 0x33U, 0x6cU, 0x7eU, 0xb7U, 0x5bU, 0x50U,
	0x48U, 0x9cU, 0x90U, 0x1fU, 0x40U, 0x45U, 0x78U, 0xffU, 0x1dU, 0xc2U, 0xa6U, 0x48U,
	0x2cU, 0x08U, 0xcaU, 0xbaU, 0x08U, 0xaeU, 0x8eU, 0x78U, 0xacU, 0x12U, 0xfeU, 0xfdU,
	0xb1U, 0x60U, 0x5cU, 0x3cU, 0xa5U, 0x8bU, 0x76U, 0x1eU, 0x52U, 0x4bU, 0xbfU, 0x6cU,
	0x28U, 0xecU, 0xd0U, 0xcdU, 0x9eU, 0xd4U, 0x1aU, 0xfaU, 0xc5U, 0x73U, 0x2aU, 0xddU,
	0x0fU, 0x30U, 0xbbU, 0xc9U, 0x63U, 0xc2U, 0x02U, 0xedU, 0x39U, 0x60U, 0x13U, 0x25U,
	0x3fU, 0xeeU, 0xa4U, 0x6fU, 0x8bU, 0x12U, 0x27U, 0x4aU, 0xdfU, 0x28U, 0x63U, 0x07U,
	0xaeU, 0xdcU, 0x6dU, 0x27U, 0x06U, 0xeeU, 0x7fU, 0x81U, 0xf1U, 0x5dU, 0x31U, 0x1aU,
	0x58U, 0xbbU, 0x8dU, 0x6eU, 0xf2U, 0x5cU, 0xdaU, 0x79U, 0xefU, 0xc0U, 0xecU, 0xf9U,
	0xdeU, 0xccU, 0xc8U, 0x07U, 0x94U, 0xafU, 0xedU, 0xfcU, 0xc3U, 0x76U, 0x87U, 0x2cU,
	0x46U, 0x15U, 0x7eU, 0x3bU, 0xf7U, 0x04U, 0x55U, 0xceU, 0xedU, 0x42U, 0xe1U, 0x22U,
	0x8cU, 0xecU, 0x87U, 0x66U, 0x9dU, 0x04U, 0xefU, 0x21U, 0xb2U, 0x3bU, 0x84U, 0x41U,
	0x85U, 0xf1U, 0xaaU, 0x6cU, 0xabU, 0xe2U, 0x67U, 0x88U, 0x1dU, 0xf8U, 0x41U, 0xb9U,
	0x7eU, 0x83U, 0x28U, 0x11U, 0xbaU, 0xb7U, 0xbdU, 0x5bU, 0x85U, 0x8bU, 0x78U, 0x6dU,
	0x16U, 0x14U, 0xa8U, 0xd3U, 0x98U, 0x2cU, 0x89U, 0x08U, 0x0aU, 0xedU, 0xb4U, 0xf2U,
	0x50U, 0x26U, 0xa8U, 0xc2U, 0x5bU, 0xbfU, 0x72U, 0xaaU, 0x1cU, 0x87U, 0x2cU, 0xa6U,
	0x48U, 0x2cU, 0x02U, 0xb8U, 0x58U, 0xe8U, 0x66U, 0x8fU, 0x41U, 0x95U, 0xeaU, 0xc9U,
	0xb0U, 0x2dU, 0x4aU, 0x14U, 0x76U, 0xadU, 0x8cU, 0x28U, 0xebU, 0x10U, 0xc8U, 0x0fU,
	0x90U, 0xd5U, 0x42U, 0x58U, 0x95U, 0xb1U, 0x55U, 0x4cU, 0x0cU, 0xcbU, 0xa0U, 0xacU,
	0xc3U, 0x07U, 0x07U, 0x1fU, 0x1fU, 0x49U, 0xecU, 0x7eU, 0x3fU, 0x55U, 0x09U, 0x55U,
	0x6aU, 0x39U, 0xb7U, 0x33U, 0xaaU, 0xd0U, 0xcfU, 0xbbU, 0xd6U, 0x8fU, 0x65U, 0xc2U,
	0xadU, 0x9bU, 0x51U, 0x55U, 0xdaU, 0xd9U, 0xa3U, 0xfcU, 0x91U, 0x0fU, 0xc6U, 0x58U,
	0xc1U, 0xafU, 0x0aU, 0x02U, 0x7dU, 0xabU, 0x58U, 0x07U, 0x49U, 0x2eU, 0x3fU, 0x92U,
	0x71U, 0x5bU, 0x61U, 0x9dU, 0xc0U, 0x66U, 0x06U, 0x13U, 0xedU, 0xf0U, 0xd5U, 0x4fU,
	0x42U, 0xecU, 0x04U, 0x55U, 0xa8U, 0x9cU, 0x45U, 0x64U, 0x6fU, 0xf9U, 0xadU, 0x5dU,
	0xfeU, 0x80U, 0x4dU, 0xa0U, 0x70U, 0xfbU, 0x61U, 0x82U, 0xeaU, 0x0fU, 0x18U, 0xc7U,
	0x65U, 0xa3U, 0x9bU, 0xd6U, 0x1fU, 0x21U, 0x65U, 0x54U, 0x61U, 0xbcU, 0x2aU, 0x49U,
	0x69U, 0xf0U, 0x33U, 0xacU, 0x33U, 0x2cU, 0x03U, 0x58U, 0x07U, 0xcbU, 0x04U, 0x69U,
	0x06U, 0xe9U, 0xc1U, 0xc0U, 0x16U, 0xd0U, 0x4dU, 0x21U, 0x12U, 0xd6U, 0x15U, 0xe6U,
	0x69U, 0x67U, 0xa2U, 0x9bU, 0x3dU, 0x65U, 0x62U, 0x01U, 0x68U, 0x67U, 0x4fU, 0x08U,
	0x4aU, 0x37U, 0xafU, 0x94U, 0xceU, 0x12U, 0x19U, 0xc3U, 0x63U, 0xedU, 0xf6U, 0xaaU,
	0x55U, 0x51U, 0x20U, 0x4bU, 0x0cU, 0x55U, 0x16U, 0x73U, 0x2cU, 0x1dU, 0xfdU, 0xecU,
	0x31U, 0xbaU, 0x41U, 0x52U, 0x19U, 0xeaU, 0x07U, 0x25U, 0x3dU, 0x18U, 0xfcU, 0xa4U,
	0x68U, 0x50U, 0xd2U, 0x5aU, 0x20U, 0xc0U, 0xe2U, 0x05U, 0xe7U, 0x14U, 0x8cU, 0x50U,
	0x3dU, 0xeeU, 0x73U, 0x60U, 0x38U, 0x07U, 0xfcU, 0xa4U, 0xacU, 0xb3U, 0xeeU, 0x55U,
	0xf6U, 0xcbU, 0x1fU, 0x15U, 0x77U, 0xebU, 0x47U, 0xfbU, 0x37U, 0x8eU, 0xe5U, 0x3eU,
	0x78U, 0xe6U, 0x25U, 0x50U, 0xbaU, 0xddU, 0x19U, 0xa5U, 0xb3U, 0xf0U, 0x01U, 0x63U,
	0x91U, 0x44U, 0x98U, 0x10U, 0x94U, 0x6dU, 0x52U, 0xfaU, 0x1bU, 0x64U, 0x25U, 0x18U,
	0x2bU, 0xacU, 0x23U, 0xa8U, 0xdfU, 0x33U, 0x61U, 0xedU, 0x03U, 0xddU, 0x55U, 0x99U,
	0x1bU, 0x65U, 0x68U, 0xa1U, 0x28U, 0x41U, 0x62U, 0x83U, 0x89U, 0x20U, 0xadU, 0xa0U,
	0x5fU, 0x36U, 0x1eU, 0x2bU, 0xc7U, 0x5dU, 0xb5U, 0x57U, 0x74U, 0x5fU, 0xc6U, 0xd4U,
	0xd9U, 0x47U, 0xfeU, 0x77U, 0x0bU, 0xcdU, 0xb4U, 0x72U, 0x5fU, 0x26U, 0x7bU, 0x56U,
	0x24U, 0x11U, 0xe7U, 0x6eU, 0x07U, 0xb6U, 0x70U, 0x96U, 0x66U, 0xf2U, 0x18U, 0xc2U,
	0x3eU, 0x60U, 0xa6U, 0x9bU, 0x32U, 0x8dU, 0xa0U, 0xdbU, 0x3eU, 0x66U, 0x9bU, 0xefU,
	0x8aU, 0x9fU, 0x95U, 0xb0U, 0x07U, 0x1cU, 0x26U, 0x82U, 0xb5U, 0x57U, 0xfaU, 0xabU,
	0x12U, 0x17U, 0x82U, 0x7aU, 0x65U, 0x19U, 0x76U, 0xedU, 0xdbU, 0x69U, 0xe5U, 0xfaU,
	0x61U, 0xc5U, 0xf3U, 0x47U, 0x10U, 0x55U, 0xa9U, 0x45U, 0x55U, 0x19U, 0x96U, 0xf0U,
	0xc3U, 0x8aU, 0x46U, 0x76U, 0x6eU, 0xdaU, 0x69U, 0x05U, 0x60U, 0x5cU, 0x03U, 0xf6U,
	0x2fU, 0x87U, 0xffU, 0x24U, 0xcfU, 0x73U, 0xaaU, 0xb2U, 0xa4U, 0x28U, 0x0aU, 0xbaU,
	0xbeU, 0xa7U, 0x6dU, 0x5bU, 0xdaU, 0xb6U, 0xe5U, 0x4fU, 0xcfU, 0xcfU, 0x00U, 0x64U,
	0x59U, 0x06U, 0x02U, 0x5fU, 0xbfU, 0xfeU, 0xceU, 0xf1U, 0x50U, 0xd3U, 0xb4U, 0x2dU,
	0xcdU, 0xd2U, 0x90U, 0xd7U, 0x05U, 0xffU, 0x9bU, 0xffU, 0x05U, 0x93U, 0xe5U, 0x98U,
	0xc4U, 0x11U, 0xe5U, 0x19U, 0x12U, 0x59U, 0xe6U, 0xf3U, 0x15U, 0xd6U, 0x01U, 0x55U,
	0x88U, 0xfeU, 0x9cU, 0x11U, 0x15U, 0x39U, 0xb6U, 0x2cU, 0x99U, 0xbfU, 0x7fU, 0x07U,
	0x04U, 0xdfU, 0xb7U, 0x08U, 0x02U, 0x3fU, 0x09U, 0xd6U, 0xb9U, 0x94U, 0xa2U, 0x28U,
	0xe8U, 0x87U, 0x81U, 0xbeU, 0x1fU, 0x78U, 0x7aU, 0x7aU, 0xa4U, 0x28U, 0x0aU, 0xd6U,
	0x75U, 0xa5U, 0x1fU, 0x06U, 0xeeU, 0xefU, 0xefU, 0x18U, 0xc6U, 0x91U, 0xa6U, 0x69U,
	0x48U, 0x53U, 0xc7U, 0xbcU, 0x2cU, 0xb8U, 0x24U, 0xe1U, 0xe1U, 0xfeU, 0x81U, 0xf3U,
	0xdbU, 0x19U, 0xc9U, 0x1cU, 0x61U, 0x1aU, 0x41U, 0x03U, 0xeaU, 0x57U, 0x74U, 0x0bU,
	0x44U, 0x71U, 0x4cU, 0x54U, 0x3dU, 0x40U, 0x6cU, 0x41U, 0x15U, 0xbcU, 0x67U, 0x3eU,
	0xbfU, 0x11U, 0xbcU, 0x47U, 0x54U, 0x71U, 0x4fU, 0x4fU, 0xe0U, 0x03U, 0x22U, 0x82U,
	0x4dU, 0x92U, 0x98U, 0xb2U, 0x28U, 0x18U, 0x87U, 0x91U, 0x79U, 0x99U, 0xf9U, 0xedU,
	0xf3U, 0x67U, 0x4eU, 0xc7U, 0x23U, 0xceU, 0x39U, 0x2eU, 0xd7U, 0x2bU, 0x97U, 0xebU,
	0x95U, 0x3cU, 0xcbU, 0x78U, 0x7eU, 0xfeU, 0x05U, 0x80U, 0xa1U, 0x1fU, 0xc8U, 0xf3U,
	0x9cU, 0xebU, 0xedU, 0x46U, 0x96U, 0x65U, 0x44U, 0x89U, 0x43U, 0xadU, 0x25U, 0x2cU,
	0x0bU, 0x61U, 0x1cU, 0xf7U, 0x9dU, 0x61U, 0xb1U, 0x84U, 0x79U, 0x24U, 0xaaU, 0x0eU,
	0xe8U, 0xb6U, 0x41U, 0x08U, 0xc4U, 0x59U, 0xc6U, 0x12U, 0xa5U, 0x24U, 0x2eU, 0xc2U,
	0xb8U, 0x18U, 0x82U, 0xb2U, 0xb6U, 0x0dU, 0x76U, 0x9aU, 0x66U, 0x3eU, 0x7fU, 0xf9U,
	0xc2U, 0xddU, 0xe9U, 0x44U, 0x5eU, 0x64U, 0xf4U, 0xfdU, 0x40U, 0x3fU, 0x0cU, 0xa4U,
	0x69U, 0xcaU, 0x7fU, 0x3cU, 0xdcU, 0x73U, 0xb9U, 0x5cU, 0x41U, 0xe1U, 0xcbU, 0xd7U,
	0x6fU, 0xd4U, 0x65U, 0x49U, 0x5dU, 0xd7U, 0x74U, 0x7dU, 0xcfU, 0xf9U, 0x7cU, 0xe6U,
	0x74U, 0x3aU, 0x11U, 0x4cU, 0x46U, 0x1cU, 0x0bU, 0xa6U, 0x16U, 0x36U, 0xafU, 0xf8U,
	0x75U, 0x43U, 0xe7U, 0x91U, 0x28U, 0x4dU, 0x10U, 0x14U, 0xdfU, 0xbeU, 0xa3U, 0x21U,
	0xb0U, 0x8dU, 0x3dU, 0x26U, 0x4eU, 0x58U, 0xd7U, 0x08U, 0x3aU, 0xc5U, 0x77U, 0x0dU,
	0x20U, 0xd8U, 0x61U, 0xe8U, 0xf7U, 0xddU, 0xcdU, 0xa5U, 0x3cU, 0xdcU, 0xdfU, 0x91U,
	0xe7U, 0x39U, 0xb7U, 0xebU, 0x8dU, 0xaaU, 0x2cU, 0x79U, 0xbbU, 0x5cU, 0x48U, 0xd3U,
	0x94U, 0xdbU, 0xf5U, 0xc6U, 0x30U, 0x0eU, 0xa0U, 0x4aU, 0xd3U, 0x76U, 0x0cU, 0x63U,
	0x4fU, 0x96U, 0xe5U, 0x14U, 0x45U, 0x81U, 0x9eU, 0xafU, 0xacU, 0xaeU, 0x40U, 0x8cU,
	0x41U, 0x12U, 0x4bU, 0x52U, 0xc4U, 0x68U, 0xbcU, 0x0fU, 0x2eU, 0xacU, 0x41U, 0x6cU,
	0xbcU, 0x4bU, 0x13U, 0x84U, 0x10U, 0x0cU, 0x44U, 0x11U, 0x6cU, 0x33U, 0xc6U, 0xa5U,
	0x00U, 0xd8U, 0x34U, 0xcdU, 0x28U, 0xcbU, 0x82U, 0xbeU, 0xefU, 0xf9U, 0xfcU, 0xe5U,
	0x0bU, 0x59U, 0x96U, 0x91U, 0xa6U, 0x29U, 0x2fU, 0xafU, 0xafU, 0xbcU, 0x37U, 0xefU,
	0x1cU, 0x0fU, 0x47U, 0x8eU, 0xa7U, 0xfdU, 0xcaU, 0xb3U, 0x8cU, 0xb7U, 0xb7U, 0x0bU,
	0xceU, 0x25U, 0xa4U, 0xceU, 0xd1U, 0x75U, 0x1dU, 0xbaU, 0xccU, 0xe8U, 0x16U, 0x90U,
	0x24U, 0x21U, 0x12U, 0xc7U, 0xe6U, 0x61U, 0xebU, 0x7bU, 0xb6U, 0x75U, 0x45U, 0x50U,
	0x48U, 0x72U, 0x24U, 0x3fU, 0x21U, 0xc6U, 0x60U, 0x5dU, 0x42U, 0x94U, 0x18U, 0x24U,
	0x39U, 0x31U, 0xbdU, 0xf5U, 0x84U, 0xf6U, 0x15U, 0x5bU, 0x55U, 0x25U, 0xc7U, 0xc3U,
	0x81U, 0xd8U, 0x5aU, 0xa6U, 0x69U, 0xcfU, 0xebU, 0xe6U, 0xbdU, 0xa1U, 0xaaU, 0x2bU,
	0x9eU, 0x1eU, 0x1fU, 0x19U, 0x86U, 0x81U, 0xaeU, 0xefU, 0x19U, 0xc7U, 0x91U, 0x38U,
	0x4eU, 0x38U, 0x1cU, 0x6aU, 0x50U, 0x25U, 0x71U, 0x0eU, 0x97U, 0x3aU, 0x84U, 0x47U,
	0x92U, 0x34U, 0x22U, 0x6cU, 0xe0U, 0x57U, 0x8fU, 0xf1U, 0x23U, 0x12U, 0xc7U, 0xc4U,
	0x69U, 0x86U, 0xd8U, 0x88U, 0xf8U, 0x74U, 0x24U, 0x8cU, 0x13U, 0xbeU, 0x1fU, 0x58U,
	0xaeU, 0x2dU, 0x1aU, 0x36U, 0x08U, 0x1bU, 0x42U, 0xd8U, 0x25U, 0x88U, 0xe3U, 0x98U,
	0xefU, 0x2fU, 0xafU, 0x34U, 0xedU, 0x3bU, 0x28U, 0x3cU, 0x3fU, 0x3fU, 0x43U, 0xa6U,
	0x7cU, 0xf9U, 0xfaU, 0x95U, 0xbaU, 0x3eU, 0xf0U, 0xf4U, 0xf4U, 0x88U, 0xaaU, 0x12U,
	0x45U, 0x11U, 0x97U, 0xcbU, 0x05U, 0xd5U, 0xc0U, 0xcfU, 0x9fU, 0x3eU, 0x71U, 0xb9U,
	0x5eU, 0x99U, 0xe7U, 0x99U, 0x30U, 0xbeU, 0x30U, 0x75U, 0x31U, 0x62U, 0x22U, 0x34U,
	0xecU, 0x6bU, 0x17U, 0x2eU, 0xc7U, 0x44U, 0x96U, 0x28U, 0x6cU, 0x8cU, 0x9fU, 0xbfU,
	0xa0U, 0xcbU, 0x0cU, 0x51U, 0x42U, 0x94U, 0xa6U, 0x88U, 0x49U, 0xd8U, 0xd6U, 0x80U,
	0xc4U, 0xf1U, 0xeeU, 0x82U, 0xebU, 0xf5U, 0xcaU, 0xf1U, 0x78U, 0xa4U, 0x28U, 0x72U,
	0x86U, 0x61U, 0x20U, 0x4bU, 0x53U, 0xdeU, 0x2eU, 0x17U, 0xb2U, 0x2cU, 0xc3U, 0xb9U,
	0x84U, 0x6fU, 0xdfU, 0x7eU, 0xdfU, 0xe7U, 0x7bU, 0x55U, 0xf2U, 0xe9U, 0xd3U, 0x27U,
	0xe6U, 0x79U, 0xfeU, 0xf1U, 0xdeU, 0xf5U, 0x7aU, 0xc5U, 0x96U, 0x25U, 0x2aU, 0x82U,
	0x28U, 0x44U, 0x79U, 0x4dU, 0x54U, 0x14U, 0xa8U, 0x0fU, 0x4cU, 0xdfU, 0xbfU, 0xb1U,
	0xadU, 0x2bU, 0x44U, 0x16U, 0xb1U, 0x8eU, 0xc8U, 0xc5U, 0x88U, 0x11U, 0x82U, 0x0fU,
	0xe8U, 0xb6U, 0xa2U, 0x7eU, 0x06U, 0x55U, 0xecU, 0x38U, 0x8eU, 0x24U, 0x89U, 0xe3U,
	0xe1U, 0xfeU, 0x0eU, 0x55U, 0xe5U, 0x1fU, 0xbfU, 0xfeU, 0x4aU, 0x96U, 0x65U, 0x1cU,
	0xeaU, 0x7aU, 0xcfU, 0x86U, 0xa1U, 0xe3U, 0xd3U, 0x4fU, 0x9fU, 0x76U, 0xfdU, 0x2fU,
	0x17U, 0x96U, 0x65U, 0x61U, 0x9aU, 0x26U, 0xc6U, 0x69U, 0x24U, 0x2fU, 0x0aU, 0xfcU,
	0xd0U, 0x83U, 0x18U, 0x8cU, 0xcbU, 0xd1U, 0x05U, 0xd6U, 0xa5U, 0x47U, 0x82U, 0xdfU,
	0x2bU, 0x76U, 0x39U, 0x62U, 0x0dU, 0x26U, 0xdaU, 0xb7U, 0x99U, 0xb5U, 0xebU, 0x61U,
	0x1eU, 0x10U, 0x1bU, 0x61U, 0xabU, 0x7aU, 0x87U, 0x30U, 0xcbU, 0x32U, 0x96U, 0x65U,
	0xe6U, 0xd7U, 0xffU, 0xffU, 0x3fU, 0xeaU, 0xaaU, 0xe6U, 0xf9U, 0xf9U, 0x99U, 0x71U,
	0x1cU, 0x29U, 0xcaU, 0x02U, 0x04U, 0x8cU, 0x31U, 0xbcU, 0xbcU, 0xbcU, 0x50U, 0x96U,
	0x25U, 0x71U, 0x1cU, 0x53U, 0x55U, 0x15U, 0x5dU, 0xd7U, 0xe1U, 0x9cU, 0x23U, 0x4dU,
	0x53U, 0x84U, 0x0aU, 0x89U, 0x62U, 0x54U, 0xc3U, 0x3eU, 0x46U, 0x35U, 0x20U, 0x89U,
	0x23U, 0xaeU, 0x4bU, 0xe2U, 0x3cU, 0x67U, 0x6eU, 0x67U, 0xd6U, 0xbeU, 0x41U, 0x97U,
	0x01U, 0x11U, 0x01U, 0x9bU, 0x20U, 0x59U, 0x8aU, 0x38U, 0x87U, 0x6cU, 0x01U, 0x7bU,
	0x77U, 0x77U, 0x22U, 0x75U, 0x29U, 0x2fU, 0xafU, 0x67U, 0xe2U, 0x38U, 0xa6U, 0xc8U,
	0x73U, 0x04U, 0xf8U, 0xedU, 0xb7U, 0xcfU, 0x00U, 0xdcU, 0x9dU, 0x4eU, 0x3cU, 0x3dU,
	0x3eU, 0xf2U, 0xdeU, 0x34U, 0xb4U, 0x6dU, 0xcbU, 0xe5U, 0x72U, 0xe1U, 0xeeU, 0xeeU,
	0x8eU, 0x24U, 0x8eU, 0xc9U, 0xf3U, 0x1cU, 0x3bU, 0x59U, 0x54U, 0x37U, 0x34U, 0x29U,
	0x48U, 0x9cU, 0x61U, 0x9dU, 0x57U, 0xc2U, 0x3cU, 0x13U, 0x9aU, 0x1bU, 0x5bU, 0xfbU,
	0x4eU, 0x58U, 0x37U, 0x34U, 0x6cU, 0x88U, 0x4dU, 0x90U, 0xbcU, 0xdeU, 0x0fU, 0x11U,
	0x56U, 0xb6U, 0x6eU, 0xb7U, 0xbfU, 0xedU, 0xbbU, 0x81U, 0xcbU, 0xe5U, 0x4aU, 0x9eU,
	0xe7U, 0xe4U, 0x79U, 0xceU, 0xdfU, 0xfeU, 0xfeU, 0x77U, 0xcaU, 0xb2U, 0xe4U, 0x50U,
	0xd7U, 0xa4U, 0x69U, 0x4aU, 0xdbU, 0x75U, 0x4cU, 0xf3U, 0xccU, 0xedU, 0xfdU, 0xc6U,
	0xa1U, 0x3eU, 0x00U, 0x10U, 0x5bU, 0x4bU, 0x9aU, 0xa6U, 0x5cU, 0xaeU, 0x57U, 0x7cU,
	0xfbU, 0x0eU, 0x28U, 0x4aU, 0xc3U, 0x24U, 0x06U, 0x89U, 0x63U, 0x4cU, 0x1cU, 0x43U,
	0x9cU, 0xb0U, 0x8dU, 0x13U, 0x51U, 0x5eU, 0x42U, 0x92U, 0xa1U, 0x5bU, 0x20U, 0x71U,
	0x20U, 0x59U, 0x8aU, 0x4eU, 0x11U, 0xf3U, 0xb0U, 0xa2U, 0xcdU, 0x19U, 0x6bU, 0x22U,
	0x43U, 0x96U, 0xeeU, 0x9aU, 0x9fU, 0xdfU, 0x2eU, 0x3fU, 0xf4U, 0x2fU, 0x8aU, 0x02U,
	0x45U, 0xf1U, 0xdeU, 0x73U, 0xbdU, 0xddU, 0x38U, 0xd6U, 0x47U, 0x0eU, 0xc7U, 0x9aU,
	0x69U, 0x9aU, 0x78U, 0x6fU, 0x1aU, 0x6eU, 0xefU, 0x0dU, 0xd3U, 0x34U, 0x22U, 0xf5U,
	0x11U, 0xc2U, 0x86U, 0x89U, 0x0cU, 0x36U, 0x89U, 0x21U, 0x36U, 0x6cU, 0xd3U, 0x42U,
	0x98U, 0x17U, 0xa2U, 0xf2U, 0x40U, 0x14U, 0x29U, 0xdbU, 0xd4U, 0x11U, 0xe6U, 0x99U,
	0xa9U, 0xf1U, 0x1fU, 0xebU, 0xf7U, 0xbaU, 0xbbU, 0x20U, 0x49U, 0xb0U, 0x97U, 0xebU,
	0x85U, 0x9fU, 0x3fU, 0xfdU, 0xccU, 0x38U, 0x4dU, 0x3cU, 0x3eU, 0xdcU, 0x73U, 0x7eU,
	0x7bU, 0xa3U, 0xebU, 0x7bU, 0x2eU, 0xd7U, 0x2bU, 0xe3U, 0x38U, 0xeeU, 0xc1U, 0xe4U,
	0x52U, 0x8eU, 0xa7U, 0x03U, 0xcdU, 0x7bU, 0x4bU, 0x96U, 0xa5U, 0x3cU, 0xffU, 0xf2U,
	0x0bU, 0x6fU, 0x97U, 0x0bU, 0x02U, 0xe8U, 0xdcU, 0x7dU, 0x6cU, 0xb5U, 0xe0U, 0x17U,
	0x41U, 0x62U, 0x47U, 0x50U, 0x21U, 0x4aU, 0x62U, 0x7cU, 0x77U, 0x65U, 0x53U, 0x05U,
	0x89U, 0xd0U, 0xc8U, 0x22U, 0x91U, 0x43U, 0x5cU, 0xb1U, 0xcbU, 0x20U, 0xf2U, 0x01U,
	0x61U, 0x9aU, 0xf3U, 0xedU, 0xdbU, 0x37U, 0x0eU, 0x87U, 0x03U, 0xdeU, 0x7bU, 0xe2U,
	0x38U, 0x26U, 0xb6U, 0x96U, 0x3cU, 0xcbU, 0xb0U, 0xd6U, 0x52U, 0x55U, 0x15U, 0xebU,
	0xb2U, 0xf0U, 0xfaU, 0x7aU, 0xa6U, 0xefU, 0x7bU, 0xf2U, 0x39U, 0x67U, 0x9aU, 0x66U,
	0xf2U, 0x2cU, 0x43U, 0x44U, 0x88U, 0x42U, 0x06U, 0x2aU, 0x84U, 0x75U, 0x25U, 0xacU,
	0x0bU, 0x3aU, 0x35U, 0x88U, 0x80U, 0x37U, 0x11U, 0x51U, 0x5eU, 0x10U, 0xb9U, 0x94U,
	0xa8U, 0x2aU, 0xd9U, 0x96U, 0x0dU, 0x3fU, 0x4cU, 0x68U, 0x08U, 0x84U, 0xf7U, 0x17U,
	0xd8U, 0x8fU, 0xcfU, 0xbfU, 0x00U, 0xa5U, 0x60U, 0x67U, 0xe6U, 0xf2U, 0xa0U, 0xa5U,
	0x4fU, 0x00U, 0x00U, 0x00U, 0x00U, 0x49U, 0x45U, 0x4eU, 0x44U, 0xaeU, 0x42U, 0x60U,
	0x82U,
});

enum class blockType : uint16_t {
    air,
    dirt,
    rock,
    water,
};

/// \brief cubic volume of block data
///
template<size_t size_param>
class volumetric_block_data final {
public:
    static constexpr size_t size = size_param;
    static constexpr size_t size_1d = size * size * size;
    static constexpr size_t size_2d = std::sqrt(size_1d);

    static_assert(is_power_of_two(size));
    static_assert(is_power_of_two(size_1d));
    static_assert(is_power_of_two(size_2d));

    static constexpr size_t CHANNELS_PER_COLOR = 2;
    using texture_data_type = std::array<gdk::texture_data::channel_type, size_1d * CHANNELS_PER_COLOR>;
    using texture_data_view_pair = std::pair<gdk::texture_data::view, std::shared_ptr<texture_data_type>>;

private:
    jfc::cube_array<blockType, size> m_Data;

public:
    const blockType &at(const size_t aX, const size_t aY, const size_t aZ) const {
        return m_Data.at(aX, aY, aZ);
    }

    blockType &at(const size_t aX, const size_t aY, const size_t aZ) {
        return m_Data.at(aX, aY, aZ);
    }

    texture_data_view_pair to_texture_data() const {
        texture_data_type textureData;

        size_t i(0);
        for (size_t j(0); j < size_1d; ++j) {
            auto currentBlock = m_Data.data()[j];

            static_assert(std::is_same_v<std::underlying_type_t<decltype(currentBlock)>, uint16_t>, 
                "required assumption that underlying type is a 2byte unsigned int");

            //TODO: test this with values beyond the 0-255 range
            uint16_t underlyingValue = static_cast<uint16_t>(currentBlock);
            textureData[i + 0] = underlyingValue & 0xFF;
            textureData[i + 1] = (underlyingValue >> 8) & 0xFF;

            i += CHANNELS_PER_COLOR;
        }

        auto pTextureData = std::make_shared<texture_data_type>(std::move(textureData));

        texture_data::view view;
        view.width = size_2d;
        view.height = size_2d;
        view.format = texture::format::rg;
        view.data = &(pTextureData->front());

        return { view, pTextureData };
    }
};

volumetric_block_data<64> blockData;
volumetric_lighting<64> staticLights;
volumetric_lighting<64> lighting;

std::array<texture_data::channel_type, 64 * 64> blockTypeToUVTextureMapData = []() {
    std::array<texture_data::channel_type, 64 * 64> blockTypeToUVTextureMapData;

    auto setFaceUVsForABlockType = [&blockTypeToUVTextureMapData](const blockType aBlockType, 
        const graphics_vector2_type &aNorth,
        const graphics_vector2_type &aSouth,
        const graphics_vector2_type &aEast,
        const graphics_vector2_type &aWest,
        const graphics_vector2_type &aTop,
        const graphics_vector2_type &aBottom) {
        size_t i(static_cast<std::underlying_type<decltype(aBlockType)>::type>(aBlockType) 
            * 6 //faces
            * 2 //channels
        );
        blockTypeToUVTextureMapData[i++] = aNorth.x * 255; 
        blockTypeToUVTextureMapData[i++] = aNorth.y * 255;
        blockTypeToUVTextureMapData[i++] = aSouth.x * 255;
        blockTypeToUVTextureMapData[i++] = aSouth.y * 255;
        blockTypeToUVTextureMapData[i++] = aEast.x * 255;
        blockTypeToUVTextureMapData[i++] = aEast.y * 255;
        blockTypeToUVTextureMapData[i++] = aWest.x * 255;
        blockTypeToUVTextureMapData[i++] = aWest.y * 255;
        blockTypeToUVTextureMapData[i++] = aTop.x * 255; 
        blockTypeToUVTextureMapData[i++] = aTop.y * 255;
        blockTypeToUVTextureMapData[i++] = aBottom.x * 255;
        blockTypeToUVTextureMapData[i++] = aBottom.y * 255;
    };

    setFaceUVsForABlockType(blockType::dirt, 
        {0.5f,0.0f},
        {0.5f,0.0f},
        {0.5f,0.0f},
        {0.5f,0.0f},
        {0.0f,0.0f},
        {0.5f,0.0f});
    setFaceUVsForABlockType(blockType::rock,
        {0.0f,0.5f},
        {0.0f,0.5f},
        {0.0f,0.5f},
        {0.0f,0.5f},
        {0.0f,0.5f},
        {0.0f,0.5f});
    setFaceUVsForABlockType(blockType::water,
        {0.5f,0.5f},
        {0.5f,0.5f},
        {0.5f,0.5f},
        {0.5f,0.5f},
        {0.5f,0.5f},
        {0.5f,0.5f});

    return blockTypeToUVTextureMapData;
}();

int main(int argc, char **argv) {
    glfw_window window("volumetric blocks + volumetric lighting");

    const auto pGraphics = webgl1es2_context::make();
    const auto pScene = pGraphics->make_scene();

    auto pCamera = [&]() {
        auto pCamera = pGraphics->make_camera();
        pScene->add(pCamera);
        return pCamera;
    }();

    const auto pTexture = [&]() {
        auto [view, data] = texture_data::make_from_png(PNG);
        auto p = pGraphics->make_texture(view,
            texture::wrap_mode::clamped,
            texture::wrap_mode::clamped);
        return p;
    }();

    texture_data::view view;
    view.width = 0;
    view.height = 0;
    view.format = texture::format::rgba;
    view.data = {};
    auto pLightingTexture = pGraphics->make_texture(view, texture::wrap_mode::clamped, texture::wrap_mode::clamped);
    auto pBlockTypeVolumeTexture = pGraphics->make_texture(view, texture::wrap_mode::clamped, texture::wrap_mode::clamped);

    texture_data::view blockUVTextureView;
    blockUVTextureView.width = 64;
    blockUVTextureView.height = 64;
    blockUVTextureView.format = texture::format::rg;
    blockUVTextureView.data = &blockTypeToUVTextureMapData.front();
    auto pBlockTypeToUVTextureMap = pGraphics->make_texture(blockUVTextureView, texture::wrap_mode::clamped, texture::wrap_mode::clamped);

    auto pShader = [&]() {
        const std::string vertexShaderSource(R"V0G0N(
        uniform mat4 _MVP;

        attribute highp vec2 a_UV;
        attribute highp vec3 a_Position;
        attribute lowp float a_BlockDirection;
        attribute highp vec3 a_BlockOffset;

        varying highp vec2 v_UV;
        varying highp vec3 v_Position;
        varying lowp float v_BlockDirection;
        varying highp vec3 v_BlockOffset;

        void main () {
            v_UV = a_UV;
            v_BlockDirection = a_BlockDirection;
            v_BlockOffset = a_BlockOffset;

            // Since we know block vertex position data should only ever be integer values (with respect to its localspace),
            // removing the fractional component will prevent any rounding issues that could create gaps between edges
            //
            vec3 position = floor(a_Position);
            v_Position = position;
            gl_Position = _MVP * vec4(position,1.0);
        }
        )V0G0N");

        const std::string fragmentShaderSource(R"V0G0N(
        uniform lowp float _VolumetricTextureSize;
        uniform sampler2D _BlockTypeToUVMappingTexture;
        uniform sampler2D _BlockTypeVolumetricTexture;
        uniform sampler2D _LightingVolumetricTexture;
        uniform sampler2D _TilesetTexture;

        uniform lowp float _NormalizedTileSize; //maybe not normalized?
        uniform highp float _BlockTypeToUVMappingTextureSize;

        varying highp vec2 v_UV;
        varying highp vec3 v_Position;
        varying lowp float v_BlockDirection;
        varying highp vec3 v_BlockOffset;

        void main() {
            ivec3 positionInVolumetricData = ivec3(floor(v_Position));

            //TODO: v_BlockOffset negates position in +Z, +X, +Y. Maybe just write this right into
            // the attribute data, rename it v_BlockPosition. Dont need to calculate it
            ivec3 blockPosition = ivec3(floor(v_Position)) + ivec3(v_BlockOffset);

            highp vec2 uv = fract(v_UV);
            uv = clamp(uv, 0.1, 0.9); //hiding UV seams
            uv *= _NormalizedTileSize;

            vec2 texColor = gdk_texture3D(_BlockTypeVolumetricTexture, _VolumetricTextureSize, vec2(0.5, 0.5), blockPosition).ra;
            int lowByte = int(texColor.x * 255.);
            int highByte = int(texColor.y * 255.);
            int blockType = highByte * 256 + lowByte;

            // TODO: turn this into a gdk_ function. indexes a 2d texture as though tis 1d. gdk_texture1D? seems generally useful
            float texWidth = _BlockTypeToUVMappingTextureSize;  
            float texHeight = _BlockTypeToUVMappingTextureSize; 
            int lookupIndex = blockType * 6 + int(v_BlockDirection);
            float xIndex = mod(float(lookupIndex), texWidth);
            float yIndex = floor(float(lookupIndex) / texWidth);
            vec2 texCoord = vec2((xIndex + 0.5) / texWidth, (yIndex + 0.5) / texHeight);
            vec2 uvOffset = texture2D(_BlockTypeToUVMappingTexture, texCoord).ra; 

            uv += uvOffset;
            vec4 texel = texture2D(_TilesetTexture, uv);

            //TODO: prevent sample wrapping 
            lowp vec3 l000 = gdk_texture3D(_LightingVolumetricTexture, _VolumetricTextureSize, vec2(0.5, 0.5), positionInVolumetricData).xyz;
            lowp vec3 l100 = gdk_texture3D(_LightingVolumetricTexture, _VolumetricTextureSize, vec2(0.5, 0.5), positionInVolumetricData + ivec3(1,0,0)).xyz;
            lowp vec3 l010 = gdk_texture3D(_LightingVolumetricTexture, _VolumetricTextureSize, vec2(0.5, 0.5), positionInVolumetricData + ivec3(0,1,0)).xyz;
            lowp vec3 l110 = gdk_texture3D(_LightingVolumetricTexture, _VolumetricTextureSize, vec2(0.5, 0.5), positionInVolumetricData + ivec3(1,1,0)).xyz;
            lowp vec3 l001 = gdk_texture3D(_LightingVolumetricTexture, _VolumetricTextureSize, vec2(0.5, 0.5), positionInVolumetricData + ivec3(0,0,1)).xyz;
            lowp vec3 l101 = gdk_texture3D(_LightingVolumetricTexture, _VolumetricTextureSize, vec2(0.5, 0.5), positionInVolumetricData + ivec3(1,0,1)).xyz;
            lowp vec3 l011 = gdk_texture3D(_LightingVolumetricTexture, _VolumetricTextureSize, vec2(0.5, 0.5), positionInVolumetricData + ivec3(0,1,1)).xyz;
            lowp vec3 l111 = gdk_texture3D(_LightingVolumetricTexture, _VolumetricTextureSize, vec2(0.5, 0.5), positionInVolumetricData + ivec3(1,1,1)).xyz;

            // TODO: refactor into gdk_texture3D_trilinear?
            // interpolation has to be done manually since GLES2 does not support 3d textures and i got around that by packing the
            // volumetric data into a 2d texture.  
            // TODO: uniform to choose none/bi/tri? offer 3 separate shaders? I dont really want to go down the rabbit hole of
            // adding preprocessor macros to auto generate different versions of the same shader, it sucks to maintain.
            // TODO: neighbours "wrap" if l000 is on the border, which means you include light values from the other side of the light volume,
            //  which needs to be fixed.
            // Performing trilinear interpolation here:
            vec3 subVoxelPosition = fract(v_Position);
            lowp vec3 lightX0 = mix(l000, l100, subVoxelPosition.x);
            lowp vec3 lightX1 = mix(l010, l110, subVoxelPosition.x);
            lowp vec3 lightY0 = mix(lightX0, lightX1, subVoxelPosition.y);
            lowp vec3 lightX2 = mix(l001, l101, subVoxelPosition.x);
            lowp vec3 lightX3 = mix(l011, l111, subVoxelPosition.x);
            lowp vec3 lightY1 = mix(lightX2, lightX3, subVoxelPosition.y);

            lowp vec3 finalLight = mix(lightY0, lightY1, subVoxelPosition.z); 
            finalLight = l000; //enable this to see lighting with zero interpolation

            gl_FragColor = vec4(texel.rgb * finalLight, 1.0); 
        }
        )V0G0N");

        return std::static_pointer_cast<webgl1es2_context>(pGraphics)->make_shader(vertexShaderSource,fragmentShaderSource);
    }();

    auto pMaterial = [&]() {
        auto pMaterial = pGraphics->make_material(pShader,
            material::render_mode::opaque,
            material::face_culling_mode::back
        );
        pMaterial->set_float("_BlockTypeToUVMappingTextureSize", 64.);
        pMaterial->set_float("_NormalizedTileSize", 0.5);
        pMaterial->set_float("_VolumetricTextureSize", 64.);
        pMaterial->set_texture("_BlockTypeToUVMappingTexture", pBlockTypeToUVTextureMap);
        pMaterial->set_texture("_BlockTypeVolumetricTexture", pBlockTypeVolumeTexture);
        pMaterial->set_texture("_LightingVolumetricTexture", pLightingTexture);
        pMaterial->set_texture("_TilesetTexture", pTexture);
        pMaterial->set_vector2("_UVOffset", {0, 0});
        pMaterial->set_vector2("_UVScale", {1, 1});

        return pMaterial;
    }();
 
    auto pSkyboxShader = [&]() {
        const std::string vertexShaderSource(R"V0G0N(
        uniform mat4 _MVP;
        attribute highp vec3 a_Position;
        varying highp vec3 v_Position;

        void main () {
            gl_Position = _MVP * vec4(a_Position,1.0);
            v_Position = a_Position;
        }
        )V0G0N");

        const std::string fragmentShaderSource(R"V0G0N(
        varying highp vec3 v_Position;

        const vec3 spaceColor = vec3(0.8, 1.0, 1.0);
        const vec3 horizonColor = vec3(0.4, 0.5, 0.8);

        void main() {
            float altitudeFactor = dot(normalize(v_Position), vec3(0.0, 1.0, 0.0));
            float t = smoothstep(-0.2, 1.0, altitudeFactor); 
            vec3 color = mix(horizonColor, spaceColor, t); 
            
            gl_FragColor = vec4(color, 1.0);
        }
        )V0G0N");

        return std::static_pointer_cast<webgl1es2_context>(pGraphics)->make_shader(vertexShaderSource,fragmentShaderSource);
    }();   

    auto pSkyboxMaterial = pGraphics->make_material(pSkyboxShader);

    auto pSkyboxModel(pGraphics->get_cube_model());

    auto pSkyboxEntity = [&]() {
        auto pSkyboxEntity = pGraphics->make_entity(pSkyboxModel, pSkyboxMaterial);
        pScene->add(pSkyboxEntity);
        pSkyboxEntity->set_transform({0, 5, 0}, {}, {30, 30, 30});
        return pSkyboxEntity; 
    }();

    for (size_t x(0); x < 16; ++x) for (size_t y(0); y < 16; ++y) blockData.at(x,0,y) = blockType::water;
    for (size_t x(1); x < 14; ++x) for (size_t z(1); z < 12; ++z) blockData.at(x,1,z) = blockType::dirt;

    blockData.at(1,7,0) = blockType::dirt;
    blockData.at(1,6,0) = blockType::dirt;
    blockData.at(3,7,0) = blockType::dirt;
    blockData.at(3,6,0) = blockType::dirt;
    blockData.at(0,4,0) = blockType::dirt;
    blockData.at(1,3,0) = blockType::dirt;
    blockData.at(2,3,0) = blockType::dirt;
    blockData.at(3,3,0) = blockType::dirt;
    blockData.at(4,4,0) = blockType::dirt;
    blockData.at(7,7,7) = blockType::dirt;
    blockData.at(8,3,8) = blockType::dirt;

    blockData.at(05,0,15) = blockType::rock;
    blockData.at(05,1,15) = blockType::rock;
    blockData.at(05,2,15) = blockType::rock;
    blockData.at(05,3,15) = blockType::rock;
    blockData.at(06,0,15) = blockType::rock;
    blockData.at(06,1,15) = blockType::rock;
    blockData.at(06,2,15) = blockType::rock;

    const gdk::model_data NORTH_FACE {{
        { "a_Position", { {
            1.0f, 1.0f, 1.0f,
            0.0f, 1.0f, 1.0f,
            0.0f, 0.0f, 1.0f,

            1.0f, 1.0f, 1.0f,
            0.0f, 0.0f, 1.0f,
            1.0f, 0.0f, 1.0f,
        }, 3 } },
        { "a_BlockOffset", { {
            -1.0f, -1.0f, -1.0f,
            0.0f, -1.0f, -1.0f,
            0.0f, 0.0f, -1.0f,

            -1.0f, -1.0f, -1.0f,
            0.0f, 0.0f, -1.0f,
            -1.0f, 0.0f, -1.0f,
        }, 3 } },
        { "a_UV", { {
            1, 1,
            0, 1,
            0, 0,

            1, 1,
            0, 0,
            1, 0,
        }, 2 } },
        { "a_BlockDirection", { {
            0.0f,
            0.0f,
            0.0f,
            0.0f,
            0.0f,
            0.0f,
        }, 1 } },
    }};

    const gdk::model_data SOUTH_FACE {{ 
        { "a_Position", { {
            1.0f, 1.0f, 0.0f,
            0.0f, 0.0f, 0.0f,
            0.0f, 1.0f, 0.0f,

            1.0f, 1.0f, 0.0f,
            1.0f, 0.0f, 0.0f,
            0.0f, 0.0f, 0.0f,
        }, 3 } },
        { "a_BlockOffset", { {
            1.0f, 1.0f, 0.0f,
            0.0f, 0.0f, 0.0f,
            0.0f, 1.0f, 0.0f,

            1.0f, 1.0f, 0.0f,
            1.0f, 0.0f, 0.0f,
            0.0f, 0.0f, 0.0f,
        }, 3 } },
        { "a_UV", { {
            1, 1,
            0, 0,
            0, 1,

            1, 1,
            1, 0,
            0, 0,
        }, 2 } },
        { "a_BlockDirection", { {
            1.0f,
            1.0f,
            1.0f,
            1.0f,
            1.0f,
            1.0f,
        }, 1 } },
    }};

    const gdk::model_data EAST_FACE {{
        { "a_Position", { {
            1.0f, 0.0f, 0.0f,
            1.0f, 1.0f, 0.0f,
            1.0f, 1.0f, 1.0f,

            1.0f, 0.0f, 0.0f,
            1.0f, 1.0f, 1.0f,
            1.0f, 0.0f, 1.0f,
        }, 3 } },
        { "a_BlockOffset", { {
            -1.0f, 0.0f, 0.0f,
            -1.0f, -1.0f, 0.0f,
            -1.0f, -1.0f, -1.0f,

            -1.0f, 0.0f, 0.0f,
            -1.0f, -1.0f, -1.0f,
            -1.0f, 0.0f, -1.0f,
        }, 3 } },
        { "a_UV", { {
            0, 0,
            1, 0,
            1, 1,

            0, 0,
            1, 1,
            0, 1,
        }, 2 } },
        { "a_BlockDirection", { {
            2.0f,
            2.0f,
            2.0f,
            2.0f,
            2.0f,
            2.0f,
        }, 1 } },
    }};

    const gdk::model_data WEST_FACE {{
        { "a_Position", { {
            0.0f, 0.0f, 0.0f,
            0.0f, 1.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0.0f, 0.0f, 0.0f,
            0.0f, 0.0f, 1.0f,
            0.0f, 1.0f, 1.0f,
        }, 3 } },
        { "a_BlockOffset", { {
            0.0f, 0.0f, 0.0f,
            0.0f, 1.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0.0f, 0.0f, 0.0f,
            0.0f, 0.0f, 1.0f,
            0.0f, 1.0f, 1.0f,
        }, 3 } },
        { "a_UV", { {
            0, 0,
            1, 1,
            1, 0,

            0, 0,
            0, 1,
            1, 1,
        }, 2 } },
        { "a_BlockDirection", { {
            3.0f,
            3.0f,
            3.0f,
            3.0f,
            3.0f,
            3.0f,
        }, 1 } },
    }};

    const gdk::model_data TOP_FACE {{
        { "a_Position", { {
            0.0f, 1.0f, 0.0f,
            1.0f, 1.0f, 1.0f,
            1.0f, 1.0f, 0.0f,

            0.0f, 1.0f, 0.0f,
            0.0f, 1.0f, 1.0f,
            1.0f, 1.0f, 1.0f,
        }, 3 } },
        { "a_BlockOffset", { {
            0.0f, -1.0f, 0.0f,
            -1.0f, -1.0f, -1.0f,
            -1.0f, -1.0f, 0.0f,

            0.0f, -1.0f, 0.0f,
            0.0f, -1.0f, -1.0f,
            -1.0f, -1.0f, -1.0f,
        }, 3 } },
        { "a_UV", { {
            0, 0,
            1, 1,
            1, 0,

            0, 0,
            0, 1,
            1, 1,
        }, 2 } },
        { "a_BlockDirection", { {
            4.0f,
            4.0f,
            4.0f,
            4.0f,
            4.0f,
            4.0f,
        }, 1 } },
    }};

    const gdk::model_data BOTTOM_FACE {{ 
        { "a_Position", { {
            0.0f, 0.0f, 0.0f,
            1.0f, 0.0f, 0.0f,
            1.0f, 0.0f, 1.0f,

            0.0f, 0.0f, 0.0f,
            1.0f, 0.0f, 1.0f,
            0.0f, 0.0f, 1.0f,
        }, 3 } },
        { "a_BlockOffset", { {
            0.0f, 0.0f, 0.0f,
            1.0f, 0.0f, 0.0f,
            1.0f, 0.0f, 1.0f,

            0.0f, 0.0f, 0.0f,
            1.0f, 0.0f, 1.0f,
            0.0f, 0.0f, 1.0f,
        }, 3 } },
        { "a_UV", { {
            0, 0,
            1, 0,
            1, 1,

            0, 0,
            1, 1,
            0, 1,
        }, 2 } },
        { "a_BlockDirection", { {
            5.0f,
            5.0f,
            5.0f,
            5.0f,
            5.0f,
            5.0f,
        }, 1 } },
    }};

    auto blockModelData = gdk::ext::volume::make_per_voxel_model_data<blockType, blockType::air, 64, 64, 64>(&blockData.at(0,0,0), [&](
        const size_t x, const size_t y, const size_t z, const blockType &c, const blockType &n, const blockType &s, const blockType &e, 
        const blockType &w, const blockType &u, const blockType &d) {
        model_data currentVoxelModelData;
        if (n == blockType::air) currentVoxelModelData += NORTH_FACE;
        if (s == blockType::air) currentVoxelModelData += SOUTH_FACE;
        if (e == blockType::air) currentVoxelModelData += EAST_FACE;
        if (w == blockType::air) currentVoxelModelData += WEST_FACE;
        if (u == blockType::air) currentVoxelModelData += TOP_FACE;
        if (d == blockType::air) currentVoxelModelData += BOTTOM_FACE;
        currentVoxelModelData.transform("a_Position", {x, y, z});
        return currentVoxelModelData;
    });

    auto blockModelDataOptimized = gdk::ext::volume::make_optimized_block_model_data<blockType, blockType::air, 64, 64, 64>(&blockData.at(0,0,0), 
        [&](float x, float y, float z, float w, float h) {
            gdk::model_data face = NORTH_FACE;
            face.transform("a_Position", {x, y, z}, {}, {static_cast<graphics_floating_point_type>(w), static_cast<graphics_floating_point_type>(h), 1.0f});
            face.transform("a_UV", {}, {}, {w, h});
            return face;
        },
        [&](float x, float y, float z, float w, float h) {
            gdk::model_data face = SOUTH_FACE;
            face.transform("a_Position", {x, y, z}, {}, {static_cast<float>(w), static_cast<float>(h), 1.0f});
            face.transform("a_UV", {}, {}, {w, h});
            return face;
        },
        [&](float x, float y, float z, float w, float h) {
            gdk::model_data face = EAST_FACE;
            face.transform("a_Position", {x, y, z}, {}, {1.0f, static_cast<float>(w), static_cast<float>(h)});
            face.transform("a_UV", {}, {}, {w,h});
            return face;
        },
        [&](float x, float y, float z, float w, float h) {
            gdk::model_data face = WEST_FACE;
            face.transform("a_Position", {x, y, z}, {}, {1.0f, static_cast<float>(w), static_cast<float>(h)});
            face.transform("a_UV", {}, {}, {w,h});
            return face;
        },
        [&](float x, float y, float z, float w, float h) {
            gdk::model_data face = TOP_FACE;
            face.transform("a_Position", {x, y, z}, {}, {static_cast<float>(w), 1.0f, static_cast<float>(h)});
            face.transform("a_UV", {}, {}, {static_cast<float>(w), static_cast<float>(h)}); 
            return face;
        },
        [&](float x, float y, float z, float w, float h) {
            gdk::model_data face = BOTTOM_FACE;
            face.transform("a_Position", {x, y, z}, {}, {static_cast<float>(w), 1.0f, static_cast<float>(h)});
            face.transform("a_UV", {}, {}, {w,h});
            return face;
        }
    );

    auto pVolumetricModel(pGraphics->make_model());
    //pVolumetricModel->upload(model::usage_hint::streaming, blockModelData);
    pVolumetricModel->upload(model::usage_hint::streaming, blockModelDataOptimized);

    auto pVolumetricEntity = [&]() {
        auto pVolumetricEntity = pGraphics->make_entity(pVolumetricModel, pMaterial);
        pScene->add(pVolumetricEntity);
        return pVolumetricEntity;
    }();

    staticLights.add_global({0.6f, 0.6f, 0.6f});
    staticLights.add_point_light({-1, 2, 0}, 20, {0.0, 0.0, 1.0});
    staticLights.add_point_light({14, 2, 14}, 10, {1.0, 0.0, 1.0});
    staticLights.add_point_light({0, 2, 14}, 10, {0.0, 1.0, 0.0});

    auto [lightingVolumeTextureView, _] = staticLights.to_texture_data();
    pLightingTexture->update_data(lightingVolumeTextureView);

    auto [blockTypeVolumeTextureView, __] = blockData.to_texture_data();
    pBlockTypeVolumeTexture->update_data(blockTypeVolumeTextureView);

    game_loop(60, [&](const float time, const float deltaTime) {
        glfwPollEvents();

        lighting = staticLights;
        lighting.add_point_light({8, 1, 8}, std::abs(std::sin(time)) * 10, {1.0, 1.0, 1.0});
        static int x = 8;
        static int z = 8;
        lighting.add_point_light({std::sin(time) * 8 + x, -2, std::cos(time) * 8 + z}, 10, {1.0, 1.0, 1.0});
        
        auto [lightingVolumeTextureView, _] = lighting.to_texture_data();
        pLightingTexture->update_data(lightingVolumeTextureView);

        graphics_matrix4x4_type root({0,0,0}, {{0.f, +3.1415f + time*0.5f, 0}});
        graphics_matrix4x4_type chunkMatrix({-8, 0, -8}, {{0, 0, 0}});

        pVolumetricEntity->set_transform(root * chunkMatrix);

        pCamera->set_perspective_projection(90, 0.01, 35, window.getAspectRatio());
        pCamera->set_transform({0, +6, +9}, {{+0.6f, 0, 0}});

        pScene->draw(window.getWindowSize());

        window.swapBuffer(); 

        return window.shouldClose();
    });

    return EXIT_SUCCESS;
}

