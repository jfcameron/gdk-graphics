// Â© Joseph Cameron - All Rights Reserved

#include "text_modeler.h"

#include <gdk/texture_data.h>
#include <jfc/to_array.h>

using namespace gdk;

static const auto GLYPH_PNG_DATA = jfc::to_array<texture_data::encoded_byte>({
    0x89U, 0x50U, 0x4eU, 0x47U, 0x0dU, 0x0aU, 0x1aU, 0x0aU, 0x00U, 0x00U, 0x00U, 0x0dU,
    0x49U, 0x48U, 0x44U, 0x52U, 0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x20U,
    0x08U, 0x06U, 0x00U, 0x00U, 0x00U, 0x73U, 0x7aU, 0x7aU, 0xf4U, 0x00U, 0x00U, 0x00U,
    0x06U, 0x62U, 0x4bU, 0x47U, 0x44U, 0x00U, 0x00U, 0x00U, 0xa2U, 0x00U, 0xe8U, 0x8dU,
    0x6eU, 0x58U, 0x3bU, 0x00U, 0x00U, 0x00U, 0x09U, 0x70U, 0x48U, 0x59U, 0x73U, 0x00U,
    0x00U, 0x12U, 0x74U, 0x00U, 0x00U, 0x12U, 0x74U, 0x01U, 0xdeU, 0x66U, 0x1fU, 0x78U,
    0x00U, 0x00U, 0x00U, 0x07U, 0x74U, 0x49U, 0x4dU, 0x45U, 0x07U, 0xe5U, 0x0bU, 0x09U,
    0x14U, 0x28U, 0x2cU, 0xf4U, 0x2fU, 0x97U, 0xefU, 0x00U, 0x00U, 0x01U, 0xbeU, 0x49U,
    0x44U, 0x41U, 0x54U, 0x58U, 0xc3U, 0xedU, 0x56U, 0xbbU, 0xadU, 0x84U, 0x30U, 0x10U,
    0x1cU, 0x4bU, 0xeeU, 0xc0U, 0x09U, 0x01U, 0x21U, 0x65U, 0x50U, 0x0bU, 0x85U, 0x50U,
    0xc0U, 0x2bU, 0x84U, 0x5aU, 0x5eU, 0x19U, 0x84U, 0x04U, 0x24U, 0xd4U, 0xe0U, 0x17U,
    0x9cU, 0x0fU, 0xd6U, 0xfbU, 0xb1U, 0x0dU, 0xbaU, 0xecU, 0x9eU, 0xa5U, 0x93U, 0x38U,
    0xefU, 0x32U, 0x5eU, 0xcfU, 0xecU, 0x07U, 0x07U, 0x00U, 0x47U, 0x3fU, 0x44U, 0x00U,
    0x08U, 0xdbU, 0xeaU, 0xb0U, 0xecU, 0x11U, 0x53U, 0xe7U, 0x40U, 0xd6U, 0xdbU, 0x0eU,
    0x00U, 0xe1U, 0xe7U, 0xf7U, 0x32U, 0x24U, 0xbfU, 0xccU, 0xfeU, 0xc6U, 0xa0U, 0x3eU,
    0xe4U, 0xffU, 0x31U, 0x8fU, 0x2fU, 0x1fU, 0x0dU, 0xfcU, 0xe8U, 0x87U, 0x88U, 0x65U,
    0xcfU, 0x7eU, 0xd4U, 0x0eU, 0x00U, 0x19U, 0x38U, 0xb3U, 0x9fU, 0xefU, 0x5bU, 0xfeU,
    0xecU, 0x3cU, 0x00U, 0xf0U, 0xdaU, 0xe6U, 0xc9U, 0x00U, 0x07U, 0x2bU, 0xacU, 0xa3U,
    0x1fU, 0x62U, 0xbaU, 0xd9U, 0x15U, 0x04U, 0x63U, 0x12U, 0xcbU, 0x1eU, 0x31U, 0x8fU,
    0xd9U, 0x79U, 0xfeU, 0xa4U, 0x8dU, 0x06U, 0x42U, 0x0eU, 0x0eU, 0xdbU, 0xeaU, 0x32U,
    0x8aU, 0xa9U, 0x7dU, 0xeaU, 0x5cU, 0x20U, 0xefU, 0x1dU, 0xfdU, 0x10U, 0x03U, 0x3fU,
    0x98U, 0x49U, 0xa0U, 0x9eU, 0xc7U, 0x69U, 0xa4U, 0xbfU, 0x1aU, 0x85U, 0x45U, 0xffU,
    0xf4U, 0x7cU, 0xdaU, 0xe8U, 0x7eU, 0x0bU, 0xbbU, 0x1aU, 0xa0U, 0x15U, 0x80U, 0xc8U,
    0xa1U, 0x96U, 0x1cU, 0x59U, 0xf6U, 0xe8U, 0x99U, 0x7eU, 0xfaU, 0xa2U, 0x9aU, 0xf2U,
    0x7cU, 0xd1U, 0x96U, 0x42U, 0xbbU, 0x85U, 0xe7U, 0xd5U, 0x5bU, 0xe7U, 0x5aU, 0x45U,
    0x9aU, 0x94U, 0x61U, 0xeaU, 0x1cU, 0x67U, 0x41U, 0x0dU, 0x3eU, 0x05U, 0x41U, 0x73U,
    0x48U, 0xe0U, 0x69U, 0x34U, 0xf2U, 0x32U, 0xe4U, 0x7bU, 0x35U, 0xcdU, 0x6bU, 0x94U,
    0x73U, 0xbbU, 0xa7U, 0xf4U, 0x8bU, 0x2cU, 0xa6U, 0x41U, 0xa4U, 0xbdU, 0x20U, 0x25U,
    0xabU, 0x4bU, 0x62U, 0x54U, 0x55U, 0xd8U, 0xd6U, 0x4bU, 0x02U, 0x91U, 0xa5U, 0xbcU,
    0x9cU, 0xacU, 0xdaU, 0x6eU, 0xe9U, 0x0bU, 0x2dU, 0xceU, 0x66U, 0x19U, 0x71U, 0x39U,
    0xb4U, 0xc6U, 0x75U, 0xc3U, 0xceU, 0x25U, 0x70U, 0x42U, 0x02U, 0xdaU, 0xebU, 0xd3U,
    0x8dU, 0xc5U, 0xacU, 0xa8U, 0xcdU, 0x81U, 0x42U, 0x27U, 0x15U, 0xb3U, 0x40U, 0x6dU,
    0x14U, 0xacU, 0x89U, 0x98U, 0xb7U, 0xd2U, 0x30U, 0x2aU, 0x0cU, 0x66U, 0x6cU, 0x17U,
    0x29U, 0xb3U, 0xcaU, 0xb3U, 0x50U, 0xdfU, 0xdaU, 0x30U, 0xe3U, 0xb8U, 0x42U, 0x02U,
    0xd1U, 0x88U, 0xf8U, 0xcdU, 0xe6U, 0x31U, 0xc3U, 0xe0U, 0x12U, 0x51U, 0xbbU, 0xa0U,
    0x96U, 0x07U, 0xc0U, 0x64U, 0x7bU, 0xf9U, 0x17U, 0x68U, 0x6aU, 0x49U, 0x32U, 0xf5U,
    0xf9U, 0xc6U, 0x14U, 0x55U, 0xe7U, 0x7bU, 0xcbU, 0x70U, 0xa9U, 0x4aU, 0x54U, 0xcbU,
    0x21U, 0x2bU, 0x18U, 0xf3U, 0x46U, 0x85U, 0x09U, 0x56U, 0x03U, 0x2fU, 0x4eU, 0x5bU,
    0x2bU, 0xf3U, 0x55U, 0x50U, 0xa3U, 0x96U, 0x4bU, 0x81U, 0xdcU, 0x63U, 0xe0U, 0xaeU,
    0x6cU, 0x86U, 0x24U, 0x77U, 0x0eU, 0xf3U, 0x95U, 0x36U, 0x8aU, 0xa6U, 0xc9U, 0xf7U,
    0xc9U, 0x65U, 0xebU, 0x73U, 0x0fU, 0xa3U, 0xd5U, 0xc7U, 0x8bU, 0xefU, 0xb5U, 0xd4U,
    0x7aU, 0x3fU, 0xc9U, 0x00U, 0xffU, 0xe0U, 0x11U, 0x1fU, 0x40U, 0x6aU, 0xddU, 0x17U,
    0xb2U, 0xf8U, 0x51U, 0x89U, 0x5bU, 0xfbU, 0x34U, 0x4bU, 0x5bU, 0xc1U, 0xadU, 0xa4U,
    0x33U, 0x2fU, 0x61U, 0x3dU, 0x3fU, 0x8aU, 0xbeU, 0xa5U, 0xccU, 0x4aU, 0x07U, 0x5aU,
    0xb8U, 0xadU, 0x12U, 0x3cU, 0x0aU, 0xbcU, 0x35U, 0x88U, 0xffU, 0xf5U, 0x95U, 0xebU,
    0x0fU, 0xc7U, 0x9aU, 0xa1U, 0x14U, 0x92U, 0xebU, 0x41U, 0xebU, 0x00U, 0x00U, 0x00U,
    0x00U, 0x49U, 0x45U, 0x4eU, 0x44U, 0xaeU, 0x42U, 0x60U, 0x82,
});

text_modeler::text_modeler(gdk::context_ptr_type pContext, gdk::material_ptr_type aMaterial) 
: m_BatchModeler(pContext, aMaterial ? aMaterial : [&]() {
    auto pTexture = pContext->make_texture(texture_data::make_from_png(GLYPH_PNG_DATA).first);
    auto pMaterial(pContext->make_material(pContext->get_alpha_cutoff_shader(), material::render_mode::opaque));
    pMaterial->set_texture("_Texture", pTexture);
    pMaterial->set_vector2("_UVScale", {1, 1});
    pMaterial->set_vector2("_UVOffset", {0, 0});
    return pMaterial;
}()) {}

void text_modeler::set_text(const std::string &string) {
    static const auto GLYPH_PER_ROW_OR_COLUMN(8);
    static const auto GLYPH_UV_SIZE(1/8.f);
    static const std::unordered_map<char, graphics_vector2_type> CHAR_TO_UV({
        {'!', {GLYPH_UV_SIZE * 3, GLYPH_UV_SIZE * 4}},
        {'"', {GLYPH_UV_SIZE * 3, GLYPH_UV_SIZE * 5}},
        {'%', {GLYPH_UV_SIZE * 4, GLYPH_UV_SIZE * 4}},
        {'(', {GLYPH_UV_SIZE * 7, GLYPH_UV_SIZE * 6}}, 
        {')', {-GLYPH_UV_SIZE * 8, GLYPH_UV_SIZE * 6}},
        {'*', {GLYPH_UV_SIZE * 6, GLYPH_UV_SIZE * 4}},
        {'+', {GLYPH_UV_SIZE * 1, GLYPH_UV_SIZE * 5}},
        {',', {GLYPH_UV_SIZE * 7, GLYPH_UV_SIZE * 5}},
        {'-', {GLYPH_UV_SIZE * 7, GLYPH_UV_SIZE * 4}},
        {'.', {GLYPH_UV_SIZE * 6, GLYPH_UV_SIZE * 5}},
        {'/', {GLYPH_UV_SIZE * 5, GLYPH_UV_SIZE * 6}}, 
        {'0', {GLYPH_UV_SIZE * 6, GLYPH_UV_SIZE * 1}},
        {'1', {GLYPH_UV_SIZE * 2, GLYPH_UV_SIZE * 3}},
        {'2', {GLYPH_UV_SIZE * 3, GLYPH_UV_SIZE * 3}},
        {'3', {GLYPH_UV_SIZE * 4, GLYPH_UV_SIZE * 3}},
        {'4', {GLYPH_UV_SIZE * 5, GLYPH_UV_SIZE * 3}},
        {'5', {GLYPH_UV_SIZE * 6, GLYPH_UV_SIZE * 3}},
        {'6', {GLYPH_UV_SIZE * 7, GLYPH_UV_SIZE * 3}},
        {'7', {GLYPH_UV_SIZE * 0, GLYPH_UV_SIZE * 4}},
        {'8', {GLYPH_UV_SIZE * 1, GLYPH_UV_SIZE * 4}},
        {'9', {GLYPH_UV_SIZE * 2, GLYPH_UV_SIZE * 4}},
        {':', {GLYPH_UV_SIZE * 2, GLYPH_UV_SIZE * 6}},
        {';', {GLYPH_UV_SIZE * 1, GLYPH_UV_SIZE * 6}},
        {'<', {GLYPH_UV_SIZE * 6, GLYPH_UV_SIZE * 6}}, 
        {'=', {GLYPH_UV_SIZE * 2, GLYPH_UV_SIZE * 5}},
        {'>', {-GLYPH_UV_SIZE * 7, GLYPH_UV_SIZE * 6}},
        {'?', {GLYPH_UV_SIZE * 0, GLYPH_UV_SIZE * 6}},
        {'\'',{GLYPH_UV_SIZE * 4, GLYPH_UV_SIZE * 5}},
        {'\\',{-GLYPH_UV_SIZE * 6, GLYPH_UV_SIZE * 6}},
        {'^', {GLYPH_UV_SIZE * 5, GLYPH_UV_SIZE * 4}},
        {'_', {GLYPH_UV_SIZE * 0, GLYPH_UV_SIZE * 5}},
        {'`', {GLYPH_UV_SIZE * 3, GLYPH_UV_SIZE * 6}},
        {'a', {GLYPH_UV_SIZE * 0, GLYPH_UV_SIZE * 0}},
        {'b', {GLYPH_UV_SIZE * 1, GLYPH_UV_SIZE * 0}},
        {'c', {GLYPH_UV_SIZE * 2, GLYPH_UV_SIZE * 0}},
        {'d', {GLYPH_UV_SIZE * 3, GLYPH_UV_SIZE * 0}},
        {'e', {GLYPH_UV_SIZE * 4, GLYPH_UV_SIZE * 0}},
        {'f', {GLYPH_UV_SIZE * 5, GLYPH_UV_SIZE * 0}},
        {'g', {GLYPH_UV_SIZE * 6, GLYPH_UV_SIZE * 0}},
        {'h', {GLYPH_UV_SIZE * 7, GLYPH_UV_SIZE * 0}},
        {'i', {GLYPH_UV_SIZE * 0, GLYPH_UV_SIZE * 1}},
        {'j', {GLYPH_UV_SIZE * 1, GLYPH_UV_SIZE * 1}},
        {'k', {GLYPH_UV_SIZE * 2, GLYPH_UV_SIZE * 1}},
        {'l', {GLYPH_UV_SIZE * 3, GLYPH_UV_SIZE * 1}},
        {'m', {GLYPH_UV_SIZE * 4, GLYPH_UV_SIZE * 1}},
        {'n', {GLYPH_UV_SIZE * 5, GLYPH_UV_SIZE * 1}},
        {'o', {GLYPH_UV_SIZE * 6, GLYPH_UV_SIZE * 1}}, 
        {'p', {GLYPH_UV_SIZE * 7, GLYPH_UV_SIZE * 1}},
        {'q', {GLYPH_UV_SIZE * 0, GLYPH_UV_SIZE * 2}},
        {'r', {GLYPH_UV_SIZE * 1, GLYPH_UV_SIZE * 2}},
        {'s', {GLYPH_UV_SIZE * 2, GLYPH_UV_SIZE * 2}},
        {'t', {GLYPH_UV_SIZE * 3, GLYPH_UV_SIZE * 2}},
        {'u', {GLYPH_UV_SIZE * 4, GLYPH_UV_SIZE * 2}},
        {'v', {GLYPH_UV_SIZE * 5, GLYPH_UV_SIZE * 2}},
        {'w', {GLYPH_UV_SIZE * 6, GLYPH_UV_SIZE * 2}},
        {'x', {GLYPH_UV_SIZE * 7, GLYPH_UV_SIZE * 2}},
        {'y', {GLYPH_UV_SIZE * 0, GLYPH_UV_SIZE * 3}},
        {'z', {GLYPH_UV_SIZE * 1, GLYPH_UV_SIZE * 3}},
        {'|', {GLYPH_UV_SIZE * 5, GLYPH_UV_SIZE * 5}},
        {'~', {GLYPH_UV_SIZE * 4, GLYPH_UV_SIZE * 6}},
    });

    float x(0), y(0), z(0);

    for (const auto character : string) {
        if (character == '\r' || character == '\n') {
            x = 0;
            y++;
        }
        else if (character == ' ') {
            x++;
        }
        else if (character == '\t') {
            x += 2;
        }
        else {
            float uvMarginLow = 0.01f;
            float uvMarginHigh = 1 - uvMarginLow;

            gdk::model_data data({
                { "a_Position", {{
                    1.0f, 1.0f, 0.0f,
                    0.0f, 1.0f, 0.0f,
                    0.0f, 0.0f, 0.0f,
                    1.0f, 1.0f, 0.0f,
                    0.0f, 0.0f, 0.0f,
                    1.0f, 0.0f, 0.0f,
                }, 3 }},
                { "a_UV", {{
                    uvMarginHigh, uvMarginLow, 
                    uvMarginLow,  uvMarginLow,
                    uvMarginLow,  uvMarginHigh, 
                    uvMarginHigh, uvMarginLow,
                    uvMarginLow,  uvMarginHigh,
                    uvMarginHigh, uvMarginHigh,
                }, 2 }}
            });
        
            data.transform("a_Position", {x * 1.1f, -y * 1.1f, z});
            data.transform("a_UV", CHAR_TO_UV.at(character), 0, {GLYPH_UV_SIZE});
            
            m_BatchModeler.push_back(data);

            x++;
        }
    }
}

const gdk::const_model_ptr_type text_modeler::model() const { return m_BatchModeler.model(); }
const gdk::const_material_ptr_type text_modeler::material() const { return m_BatchModeler.material(); }
void text_modeler::upload() { m_BatchModeler.upload(); }

