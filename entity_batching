Support Entity Batching, to improve rendering performance for scenes that contain a large amount of entities using the same siple model

Problem description:
drawing in opengl has a constant cost regardless of the #vertexes in the object being rendered, referred to as an overhead, so a scene with more than one entity to draw, this overhead cost will increase linearly.

There is an opportunity to fight against this cost however by merging the vertex data for many entities using the same model into a new merged model and rendering the merged model instead. If the vertex data contained by that model is sufficiently complex, there wont be a benefit. To merge instances, we must perform vertex transformations on CPU. However in the case of very simple models (quads, tris), which are used when rendering such things as particles, sprites, etc. batching is an opportunity to see a performance gain.

N = number of entities in the scene using the same model
Advantage: draw overhead is reduced from N to 1.
Disadvantages: 
    vertex data must be kept in system memory: 
        size of vertex data * N 
    vertex transformations must be performed on the CPU, appended to a buffer the uploaded to the gl:
        cpu usage: N matrix multiplications, buffer size: of N * size of vertex data

User configurability:
As you can see batching is not free. The only reason you should do it is because doing so is less costly than the accumulated overhead.
The decision is controlled by the number of entities using the same model in the scene, and this number will be highly dependant on
platform and on the size of the vertex data. So this number will be exposed to the user, and they will be able to write logic to adjust its
value depending on whatever their needs are.

In the case where you know you do not need to batch ever, another optimization is availble: to not keep the vertex data in system memory after
it has been uploaded to the OpenGL context.
This will be communicated to the user by changing the model constructors:
model(const vertex_data_view &) -> leads to a model with no copy in RAM. Lean but cannot be batched.
model(const vertex_data &&) -> owns a copy of vertex_data in RAM. Can be batched.

Result:
Batching will be implicit to the renderer.
The user will be able to choose what models can or cannot be batched and will not pay a memory price if they opt out
The user will be able to choose when to batch a model based on the number of entities in the scene using the same model

---

non_batchable_model(const vertex_data &) //no batch

batchable_model(const vertex_data &v, size_t batch_threshold) //batch

model
webgles2_model
webles2_batchable_model?

NO:

I think this is an example of where such a thing should be parameterized at the context level, so a ctor argument!!
lists of values are hard to read so perhaps a POD. so

jfc::buffered_value<jfc::vector3<float>, 10> position; <-- stores position + 10 copies of its old values.

pContext = make_context({
    .batchVertexCount = 200?
});

if entities_with_same_model.size()
    total_vertexes = entities_with_same_model.size() * entities_with_same_model.front()->get_model()->vertex_count? <-! this method should be hidden

    size_t batch_count = std::static_cast<size_t>(std::floor(total_vertexes / batch_vertex_count);
    
    so the ONLY thing that can vary is the modelview matrix. Material must be the same. still doable! but this now covers a very small number of cases

* my current "batched_model" is much better thoughtout than i remembered. only thing I dont like about it is the .model method, it should actually be a model.. but thats not possible. there should be owners, so model_owner, texture_owner, material_owner, these provide the ability for the library to call into extensions without knowning what those extentions are.

*batched_model -> batched_modeler, move to ext namespace and call it a day. i remembered it being terrible but its actually pretty good, just the name does not reflect the fact that it is NOT a model, it is a higher level abstraction. I wanted to be able to use it wherever I use model, but the more I think about it, this has much less value then it adds complexity and confusion.
*batched_modeler can serve as an example extension. it is also necessary for things like: tile renderer, voxel renderer, text renderer, terrain renderer
*or maybe call it a batch_renderer? hmm
