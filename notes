gdk-graphics' scope is approaching completion. Very barebones, no nonsense, textures are provided byte data, vertex data is provided as fp attrib arrays. How to deal with things that are complex enough and not required by all projects requiring a renderer? ie animation system, text rendering system? Projects that depend on gdk-grahpics.
examples:

gdk-graphics-text (ttf renderer subproject)
gdk-graphics-animation (bone anim subpojec)

early text work is on a separate branch on this project. need to refactor that and then continue work.

some extremely early animation work is in an old renderer project from 5 years ago. the lib i used to load 3dsmax/blender scenes was wayyyyyyy too heavy. smarter solutions: 
    1 find a file format that i like, preferably an open format, then find a load/save lib for it.
    2 create a format based on CBORS, write a conversion tool that depends on the heavy lib to convert a specialized blender scene to the cbors format. 
    format would probably be:
        list of attribute data, 
        list of EITHER texture data written right into the bin file OR relative file path to texture file
        list of bones, 
        list of animations













scene
    draw()

    cameras_collection

    opaque_batch_collection
        vertex_data
        material
        entity_list

    transparent_batch_collection -> Somehow sort by blend options
        blend_options
        vertex_data
        material
        sorted_by_depth_entity_list

    drawOpaqueBatches
    {
        if blend state is not opaque then reset... this implies a "pipeline" object || naive impl is just flatten it

        for (batch : opaques) batch.draw(
                                |
                                > vertex_data.bind
                                  material.bind
                                  |
                                  > shader.bind
                                    upload all the material's uniforms
    }

    drawTransparents
    {
        ??
    }

    draw()
    {
        for (camera : cameras)
        {
            camera.bind

            for (opaque : opaques) opaque.draw()

            for (transparent : transparents) transparent.draw()
        }
    }

camera
    draw(entity? entity list?)

material
    uniform state
    shader ptr

-=-=-=
thoughts on uniform value state:
Goal: want to be able to specify values at different points in scene render.
Problem: when a value is set, you lose the last value. So if a value is set on a shaderprogram basis (most efficient), as soon as an entity coems along with a new value, it gets run over for subsequent entity draw calls.
Solution: store old values somehow.
Entity
    UniformValues

Shader
    UniformValues

Shader::use()
{
    useProgram;
    assignUniformValues();
}

Entity::draw()
{
    for (uniform : uniforms)
        if (pShader->setUniform(uniform)
}

Shader::setUniform(name, data) //This optimization is bad. i thik just overwite, let the user optimize themselves. (ie dont overwite a shader's uniform's per-shader value with a per entity vlaue. easy to avoid)
{
    if (auto search = m_Uniforms[name]; !search == m_Uniforms.end() && search->second != data) //not sure how important this optimization is.
    {
        glUniform(name,data);
    }

    ... now how to reset? Cant here. Need to call assignUniformValues again. guard gl calls with memoization.
}

Shader::assignUniformValues() // Shader::setUniforms? hmmm.
{
    for (uniform : uniforms) //this is the important opti
    {
        // Where s_LastActiveAttribtueValue is a map that gets reset at beginning on  glUseProgram() call.
        if (auto search = s_LastActiveAttribtueValue[uniform.name]; search != s_LastActiveAttribtueValue.end() && search.value != uniform.value)
        {
            glUniform(uniform.name, uniform.value);
        }
    }
}
the above is close to correct.. but it ties uniform state directly to a shader. Thats not correct because it means we cant share shaders among "materials".. material is an abstraction taht doesnt exist yet. A material is a shader, uniform state, other draw related pipeline state?
