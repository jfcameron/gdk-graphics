// Â© Joseph Cameron - All Rights Reserved

#include <string>

#include <jfc/catch.hpp>
#include <jfc/types.h>

#include "test_include.h"

#include <gdk/webgl1es2_texture.h>

using namespace gdk;

static const std::vector<GLubyte> textureDataPNGRGBA32(
{
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08,
    0x08, 0x02, 0x00, 0x00, 0x00, 0x4b, 0x6d, 0x29, 0xdc, 0x00, 0x00, 0x00,
    0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xae, 0xce, 0x1c, 0xe9, 0x00, 0x00,
    0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc,
    0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
    0x0e, 0xc3, 0x00, 0x00, 0x0e, 0xc3, 0x01, 0xc7, 0x6f, 0xa8, 0x64, 0x00,
    0x00, 0x00, 0x1b, 0x49, 0x44, 0x41, 0x54, 0x18, 0x57, 0x63, 0xf8, 0xff,
    0xff, 0xff, 0xcc, 0x9b, 0xaf, 0x30, 0x49, 0x06, 0xac, 0xa2, 0x40, 0x72,
    0x30, 0xea, 0xf8, 0xff, 0x1f, 0x00, 0xd3, 0x06, 0xab, 0x21, 0x92, 0xd9,
    0xa4, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
    0x60, 0x82
});

TEST_CASE("gdk::webgl1es2_texture", "[gdk::webgl1es2_texture]")
{
    initGL();

    SECTION("webgl1es2_texture produces a valid webgl1es2_texture in the gl context")
    {
        auto tex = webgl1es2_texture::GetCheckerboardOfDeath();

        REQUIRE(tex->getHandle() != 0);
    }

    SECTION("regular ctor and move semantics work")
    {
        webgl1es2_texture tex(webgl1es2_texture::make_from_png_rgba32(textureDataPNGRGBA32));

        webgl1es2_texture b = std::move(tex);
        
        REQUIRE(!jfc::glGetError());
    }

    SECTION("construction by image view works")
    {
        //
        gdk::webgl1es2_texture::webgl1es2_texture_2d_data_view_type view;
        view.width = 2;
        view.height = 2;
        view.format = webgl1es2_texture::format::rgba;

        std::vector<std::underlying_type<std::byte>::type> imageData({
            0x00, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0xff,
        });

        view.data = reinterpret_cast<std::byte *>(&imageData.front()); 

        webgl1es2_texture tex(view);
        
        REQUIRE(!jfc::glGetError());
    }
}

